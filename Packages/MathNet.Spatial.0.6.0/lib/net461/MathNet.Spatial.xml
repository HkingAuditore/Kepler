<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Spatial</name>
    </assembly>
    <members>
        <member name="T:MathNet.Spatial.Euclidean.Circle2D">
            <summary>
            Describes a standard 2 dimensional circle
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.#ctor(MathNet.Spatial.Euclidean.Point2D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Circle2D"/> struct.
            Creates a Circle of a given radius from a center point
            </summary>
            <param name="center">The location of the center</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle2D.Center">
            <summary>
            Gets the center point of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle2D.Radius">
            <summary>
            Gets the radius of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle2D.Circumference">
            <summary>
            Gets the circumference of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle2D.Diameter">
            <summary>
            Gets the diameter of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle2D.Area">
            <summary>
            Gets the area of the circle
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.op_Equality(MathNet.Spatial.Euclidean.Circle2D,MathNet.Spatial.Euclidean.Circle2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified circles is equal.
            </summary>
            <param name="left">The first circle to compare.</param>
            <param name="right">The second circle to compare.</param>
            <returns>True if the circles are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.op_Inequality(MathNet.Spatial.Euclidean.Circle2D,MathNet.Spatial.Euclidean.Circle2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified circles is not equal.
            </summary>
            <param name="left">The first circle to compare.</param>
            <param name="right">The second circle to compare</param>
            <returns>True if the circles are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.FromPoints(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Creates a <see cref="T:MathNet.Spatial.Euclidean.Circle2D"/> circle from three points which lie along its circumference.
            Points may not be collinear
            </summary>
            <param name="pointA">The first point on the circle.</param>
            <param name="pointB">The second point on the circle.</param>
            <param name="pointC">The third point on the circle.</param>
            <returns>A Circle which is defined by the three specified points</returns>
            <exception cref="T:System.ArgumentException">An exception is thrown if no possible circle can be formed from the points</exception>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.Equals(MathNet.Spatial.Euclidean.Circle2D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of circles are equal
            </summary>
            <param name="c">The circle to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the points are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.Equals(MathNet.Spatial.Euclidean.Circle2D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Circle3D">
            <summary>
            Describes a 3 dimensional circle
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Circle3D.CenterPoint">
            <summary>
            The center of the circle
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Circle3D.Axis">
            <summary>
            the axis of the circle
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Circle3D.Radius">
            <summary>
            the radius of the circle
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Circle3D"/> struct.
            Constructs a Circle3D with a given <paramref name="radius"/> at a <paramref name="centerPoint"/> orientated to the <paramref name="axis"/>
            </summary>
            <param name="centerPoint">The center of the circle</param>
            <param name="axis">the axis of the circle</param>
            <param name="radius">the radius of the circle</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle3D.Diameter">
            <summary>
            Gets the diameter of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle3D.Circumference">
            <summary>
            Gets the circumference of the circle
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Circle3D.Area">
            <summary>
            Gets the area of the circle
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.op_Equality(MathNet.Spatial.Euclidean.Circle3D,MathNet.Spatial.Euclidean.Circle3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified circles is equal.
            </summary>
            <param name="left">The first circle to compare</param>
            <param name="right">The second circle to compare</param>
            <returns>True if the circles are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.op_Inequality(MathNet.Spatial.Euclidean.Circle3D,MathNet.Spatial.Euclidean.Circle3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified circles is not equal.
            </summary>
            <param name="left">The first circle to compare</param>
            <param name="right">The second circle to compare</param>
            <returns>True if the circles are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.FromPoints(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Circle3D"/> struct.
            Create a circle from three points which lie along its circumference.
            </summary>
            <param name="p1">The first point on the circle</param>
            <param name="p2">The second point on the circle</param>
            <param name="p3">The third point on the circle</param>
            <returns>A <see cref="T:MathNet.Spatial.Euclidean.Circle3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.FromPointsAndAxis(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Circle3D"/> struct.
            Create a circle from the midpoint between two points, in a direction along a specified axis
            </summary>
            <param name="p1">First point on the circumference of the circle</param>
            <param name="p2">Second point on the circumference of the circle</param>
            <param name="axis">Direction of the plane in which the circle lies</param>
            <returns>A <see cref="T:MathNet.Spatial.Euclidean.Circle3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.Equals(MathNet.Spatial.Euclidean.Circle3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of circles are equal
            </summary>
            <param name="c">The circle to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the points are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.Equals(MathNet.Spatial.Euclidean.Circle3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Circle3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.CoordinateSystem">
            <summary>
            A coordinate system
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.CoordinateSystem.Item3DPattern">
            <summary>
            A local regex pattern for 3D items
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.CoordinateSystem.CsPattern">
            <summary>
            A local regex pattern for a coordinate system
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.CoordinateSystem"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.#ctor(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.CoordinateSystem"/> class.
            </summary>
            <param name="xAxis">The x axis</param>
            <param name="yAxis">The y axis</param>
            <param name="zAxis">The z axis</param>
            <param name="origin">The origin</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.CoordinateSystem"/> class.
            </summary>
            <param name="origin">The origin</param>
            <param name="xAxis">The x axis</param>
            <param name="yAxis">The y axis</param>
            <param name="zAxis">The z axis</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.CoordinateSystem"/> class.
            </summary>
            <param name="origin">The origin</param>
            <param name="xAxis">The x axis</param>
            <param name="yAxis">The y axis</param>
            <param name="zAxis">The z axis</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.#ctor(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.CoordinateSystem"/> class.
            </summary>
            <param name="matrix">A matrix</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.XAxis">
            <summary>
            Gets the X Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.YAxis">
            <summary>
            Gets the Y Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.ZAxis">
            <summary>
            Gets the z Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.Origin">
            <summary>
            Gets the point of origin
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.OffsetToBase">
            <summary>
            Gets the offset to origin
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.CoordinateSystem.BaseChangeMatrix">
            <summary>
            Gets the base change matrix
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.op_Equality(MathNet.Spatial.Euclidean.CoordinateSystem,MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified coordinate system is equal.
            </summary>
            <param name="left">The first coordinate system to compare</param>
            <param name="right">The second coordinate system to compare</param>
            <returns>True if the coordinate system are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.op_Inequality(MathNet.Spatial.Euclidean.CoordinateSystem,MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified coordinate system is not equal.
            </summary>
            <param name="left">The first coordinate system to compare</param>
            <param name="right">The second coordinate system to compare</param>
            <returns>True if the coordinate systems are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Parse(System.String)">
            <summary>
            Creates a coordinate system from a string
            </summary>
            <param name="s">The string</param>
            <returns>A coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.RotateTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D,System.Nullable{MathNet.Spatial.Euclidean.UnitVector3D})">
            <summary>
            Sets to the matrix of rotation that aligns the 'from' vector with the 'to' vector.
            The optional Axis argument may be used when the two vectors are perpendicular and in opposite directions to specify a specific solution, but is otherwise ignored.
            </summary>
            <param name="fromVector3D">Input Vector object to align from.</param>
            <param name="toVector3D">Input Vector object to align to.</param>
            <param name="axis">Input Vector object. </param>
            <returns>A rotated coordinate system </returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Rotation(MathNet.Spatial.Units.Angle,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Creates a coordinate system that rotates
            </summary>
            <param name="angle">Angle to rotate</param>
            <param name="v">Vector to rotate about</param>
            <returns>A rotating coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Rotation(MathNet.Spatial.Units.Angle,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Creates a coordinate system that rotates
            </summary>
            <param name="angle">Angle to rotate</param>
            <param name="v">Vector to rotate about</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Rotation(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotation around Z (yaw) then around Y (pitch) and then around X (roll)
            http://en.wikipedia.org/wiki/Aircraft_principal_axes
            </summary>
            <param name="yaw">Rotates around Z</param>
            <param name="pitch">Rotates around Y</param>
            <param name="roll">Rotates around X</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Yaw(MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates around Z
            </summary>
            <param name="av">An angle</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Pitch(MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates around Y
            </summary>
            <param name="av">An angle</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Roll(MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates around X
            </summary>
            <param name="av">An angle</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.CreateMappingCoordinateSystem(MathNet.Spatial.Euclidean.CoordinateSystem,MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Creates a coordinate system that maps from the 'from' coordinate system to the 'to' coordinate system.
            </summary>
            <param name="fromCs">The from coordinate system</param>
            <param name="toCs">The to coordinate system</param>
            <returns>A mapping coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.SetToAlignCoordinateSystems(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Sets this matrix to be the matrix that maps from the 'from' coordinate system to the 'to' coordinate system.
            </summary>
            <param name="fromOrigin">Input Point3D that defines the origin to map the coordinate system from.</param>
            <param name="fromXAxis">Input Vector3D object that defines the X-axis to map the coordinate system from.</param>
            <param name="fromYAxis">Input Vector3D object that defines the Y-axis to map the coordinate system from.</param>
            <param name="fromZAxis">Input Vector3D object that defines the Z-axis to map the coordinate system from.</param>
            <param name="toOrigin">Input Point3D object that defines the origin to map the coordinate system to.</param>
            <param name="toXAxis">Input Vector3D object that defines the X-axis to map the coordinate system to.</param>
            <param name="toYAxis">Input Vector3D object that defines the Y-axis to map the coordinate system to.</param>
            <param name="toZAxis">Input Vector3D object that defines the Z-axis to map the coordinate system to.</param>
            <returns>A mapping coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Translation(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Creates a translation
            </summary>
            <param name="translation">A translation vector</param>
            <returns>A translated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.SetRotationSubMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Creates a rotating coordinate system
            </summary>
            <param name="r">A 3×3 matrix with the rotation portion</param>
            <param name="coordinateSystem">A rotated coordinate system</param>
            <returns>A rotating coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.GetRotationSubMatrix(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Gets a rotation submatrix from a coordinate system
            </summary>
            <param name="coordinateSystem">a coordinate system</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.ResetRotations">
            <summary>
            Resets rotations preserves scales
            </summary>
            <returns>A coordinate system with reset rotation</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.RotateCoordSysAroundVector(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates a coordinate system around a vector
            </summary>
            <param name="about">The vector</param>
            <param name="angle">An angle</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.RotateNoReset(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotate without Reset
            </summary>
            <param name="yaw">The yaw</param>
            <param name="pitch">The pitch</param>
            <param name="roll">The roll</param>
            <returns>A rotated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.OffsetBy(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Translates a coordinate system
            </summary>
            <param name="v">a translation vector</param>
            <returns>A translated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.OffsetBy(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Translates a coordinate system
            </summary>
            <param name="v">a translation vector</param>
            <returns>A translated coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformToCoordSys(MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Transforms a ray according to this change matrix
            </summary>
            <param name="r">a ray</param>
            <returns>a transformed ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformToCoordSys(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Transforms a point according to this change matrix
            </summary>
            <param name="p">a point</param>
            <returns>a transformed point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformFromCoordSys(MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Transforms a ray according to the inverse of this change matrix
            </summary>
            <param name="r">a ray</param>
            <returns>a transformed ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformFromCoordSys(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Transforms a point according to the inverse of this change matrix
            </summary>
            <param name="p">a point</param>
            <returns>a transformed point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.SetRotationSubMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Creates a rotation submatrix
            </summary>
            <param name="r">a matrix</param>
            <returns>a coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.SetTranslation(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns a translation coordinate system
            </summary>
            <param name="v">a vector</param>
            <returns>a coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.GetRotationSubMatrix">
            <summary>
            Returns a rotation sub matrix
            </summary>
            <returns>a rotation sub matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Transforms a vector and returns the transformed vector
            </summary>
            <param name="v">A vector</param>
            <returns>A transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Transforms a vector and returns the transformed vector
            </summary>
            <param name="v">a unit vector</param>
            <returns>A transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Transforms a point and returns the transformed point
            </summary>
            <param name="p">a point</param>
            <returns>A transformed point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Transforms a coordinate system and returns the transformed
            </summary>
            <param name="cs">a coordinate system</param>
            <returns>A transformed coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.LineSegment3D)">
            <summary>
            Transforms a line segment.
            </summary>
            <param name="l">A line segment</param>
            <returns>The transformed line segment</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Transform(MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Transforms a ray and returns the transformed.
            </summary>
            <param name="ray">A ray</param>
            <returns>A transformed ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms a coordinate system
            </summary>
            <param name="matrix">a matrix</param>
            <returns>A transformed coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.TransformBy(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Transforms this by the coordinate system and returns the transformed.
            </summary>
            <param name="cs">a coordinate system</param>
            <returns>a transformed coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Invert">
            <summary>
            Inverts this coordinate system
            </summary>
            <returns>An inverted coordinate system</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Equals(MathNet.Spatial.Euclidean.CoordinateSystem,System.Double)">
            <summary>
            Returns a value to indicate if this CoordinateSystem is equivalent to a another CoordinateSystem
            </summary>
            <param name="other">The CoordinateSystem to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the CoordinateSystems are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Equals(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.ToString">
            <summary>
            Returns a string representation of the coordinate system
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.CoordinateSystem.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.EulerAngles">
            <summary>
            A means of representing spatial orientation of any reference frame.
            More information can be found https://en.wikipedia.org/wiki/Euler_angles
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.EulerAngles.Alpha">
            <summary>
            Alpha (or phi) is the rotation around the z axis
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.EulerAngles.Beta">
            <summary>
            Beta (or theta) is the rotation around the N axis
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.EulerAngles.Gamma">
            <summary>
            Gamma (or psi) is the rotation around the Z axis
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.#ctor(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.EulerAngles"/> struct.
            Constructs a EulerAngles from three provided angles
            </summary>
            <param name="alpha">The alpha angle is the rotation around the z axis</param>
            <param name="beta">The beta angle is the rotation around the N axis</param>
            <param name="gamma">The gamma angle is the rotation around the Z axis</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.op_Equality(MathNet.Spatial.Euclidean.EulerAngles,MathNet.Spatial.Euclidean.EulerAngles)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified EulerAngles is equal.
            </summary>
            <param name="left">The first EularAngle to compare</param>
            <param name="right">The second EularAngle to compare</param>
            <returns>True if the EulerAngles are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.op_Inequality(MathNet.Spatial.Euclidean.EulerAngles,MathNet.Spatial.Euclidean.EulerAngles)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified EulerAngles is not equal.
            </summary>
            <param name="left">The first EularAngle to compare</param>
            <param name="right">The second EularAngle to compare</param>
            <returns>True if the EulerAngles are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.IsEmpty">
            <summary>
            Checks if the EulerAngles are empty
            </summary>
            <returns>true if the angles have not been set</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.Equals(MathNet.Spatial.Euclidean.EulerAngles,System.Double)">
            <summary>
            Returns a value to indicate if this EulerAngles is equivalent to a given EulerAngles
            </summary>
            <param name="other">The EulerAngles to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the EulerAngles are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.Equals(MathNet.Spatial.Euclidean.EulerAngles,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value to indicate if this EulerAngles is equivalent to a given EulerAngles
            </summary>
            <param name="other">The EulerAngles to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the EulerAngles are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.Equals(MathNet.Spatial.Euclidean.EulerAngles)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.EulerAngles.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Line2D">
            <summary>
            This structure represents a line between two points in 2-space.  It allows for operations such as
            computing the length, direction, projections to, comparisons, and shifting by a vector.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Line2D.StartPoint">
            <summary>
            The starting point of the line segment
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Line2D.EndPoint">
            <summary>
            The end point of the line segment
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.#ctor(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> struct.
            Throws an ArgumentException if the <paramref name="startPoint"/> is equal to the <paramref name="endPoint"/>.
            </summary>
            <param name="startPoint">the starting point of the line segment.</param>
            <param name="endPoint">the ending point of the line segment</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Line2D.Length">
            <summary>
            Gets the distance from <see cref="F:MathNet.Spatial.Euclidean.Line2D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.Line2D.EndPoint"/>
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Line2D.Direction">
            <summary>
            Gets a normalized vector in the direction from <see cref="F:MathNet.Spatial.Euclidean.Line2D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.Line2D.EndPoint"/>
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.op_Equality(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Euclidean.Line2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.op_Inequality(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Euclidean.Line2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.op_Addition(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Euclidean.Line2D)">
            <summary>
            Adds a vector to the start point and end point of the line
            </summary>
            <param name="offset">The vector to add</param>
            <param name="line">The line</param>
            <returns>A new <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> at the adjusted points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.op_Addition(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Adds a vector to the start point and end point of the line
            </summary>
            <param name="line">The line</param>
            <param name="offset">The vector to add</param>
            <returns>A new line at the adjusted points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.op_Subtraction(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Subtracts a vector from the start point and end point of the line
            </summary>
            <param name="line">The line</param>
            <param name="offset">The vector to subtract</param>
            <returns>A new line at the adjusted points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.Parse(System.String,System.String)">
            <summary>
            Returns a new <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> from a pair of strings which represent points.
            See <see cref="M:MathNet.Spatial.Euclidean.Point2D.Parse(System.String,System.IFormatProvider)" /> for details on acceptable formats.
            </summary>
            <param name="startPointString">The string representation of the first point.</param>
            <param name="endPointString">The string representation of the second point.</param>
            <returns>A line segment from the first point to the second point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.LineTo(MathNet.Spatial.Euclidean.Point2D,System.Boolean)">
            <summary>
            Returns the shortest line between this line and a point.
            </summary>
            <param name="p">the point to create a line to</param>
            <param name="mustStartBetweenAndEnd">If false the start point can extend beyond the start and endpoint of the line</param>
            <returns>The shortest line between the line and the point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.ClosestPointTo(MathNet.Spatial.Euclidean.Point2D,System.Boolean)">
            <summary>
            Returns the closest point on the line to the given point.
            </summary>
            <param name="p">The point that the returned point is the closest point on the line to</param>
            <param name="mustBeOnSegment">If true the returned point is contained by the segment ends, otherwise it can be anywhere on the projected line</param>
            <returns>The closest point on the line to the provided point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.IntersectWith(MathNet.Spatial.Euclidean.Line2D)">
            <summary>
            Compute the intersection between two lines with parallelism considered by the double floating point precision
            on the cross product of the two directions.
            </summary>
            <param name="other">The other line to compute the intersection with</param>
            <returns>The point at the intersection of two lines, or null if the lines are parallel.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.IntersectWith(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Units.Angle)">
            <summary>
            Compute the intersection between two lines if the angle between them is greater than a specified
            angle tolerance.
            </summary>
            <param name="other">The other line to compute the intersection with</param>
            <param name="tolerance">The tolerance used when checking if the lines are parallel</param>
            <returns>The point at the intersection of two lines, or null if the lines are parallel.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.IsParallelTo(MathNet.Spatial.Euclidean.Line2D)">
            <summary>
            Checks to determine whether or not two lines are parallel to each other, using the dot product within
            the double precision specified in the MathNet.Numerics package.
            </summary>
            <param name="other">The other line to check this one against</param>
            <returns>True if the lines are parallel, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.IsParallelTo(MathNet.Spatial.Euclidean.Line2D,MathNet.Spatial.Units.Angle)">
            <summary>
            Checks to determine whether or not two lines are parallel to each other within a specified angle tolerance
            </summary>
            <param name="other">The other line to check this one against</param>
            <param name="tolerance">If the angle between line directions is less than this value, the method returns true</param>
            <returns>True if the lines are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.Equals(MathNet.Spatial.Euclidean.Line2D)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Line3D">
            <summary>
            A line between two points
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Line3D.StartPoint">
            <summary>
            The start point of the line
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Line3D.EndPoint">
            <summary>
            The end point of the line
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Line3D"/> struct.
            Throws an ArgumentException if the <paramref name="startPoint"/> is equal to the <paramref name="endPoint"/>.
            </summary>
            <param name="startPoint">The starting point of the line segment.</param>
            <param name="endPoint">The ending point of the line segment.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Line3D.Length">
            <summary>
            Gets distance from <see cref="F:MathNet.Spatial.Euclidean.Line3D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.Line3D.EndPoint"/>, the length of the line
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Line3D.Direction">
            <summary>
            Gets the direction from the <see cref="F:MathNet.Spatial.Euclidean.Line3D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.Line3D.EndPoint"/>
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.op_Equality(MathNet.Spatial.Euclidean.Line3D,MathNet.Spatial.Euclidean.Line3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.op_Inequality(MathNet.Spatial.Euclidean.Line3D,MathNet.Spatial.Euclidean.Line3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.Parse(System.String,System.String)">
            <summary>
            Returns a new <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> from a pair of strings which represent points.
            See <see cref="M:MathNet.Spatial.Euclidean.Point3D.Parse(System.String,System.IFormatProvider)" /> for details on acceptable formats.
            </summary>
            <param name="startPoint">The string representation of the first point.</param>
            <param name="endPoint">The string representation of the second point.</param>
            <returns>A line segment from the first point to the second point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.LineTo(MathNet.Spatial.Euclidean.Point3D,System.Boolean)">
            <summary>
            Returns the shortest line between this line and a point.
            </summary>
            <param name="p">the point to create a line to</param>
            <param name="mustStartBetweenStartAndEnd">If false the start point can extend beyond the start and endpoint of the line</param>
            <returns>The shortest line between the line and the point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.ClosestPointTo(MathNet.Spatial.Euclidean.Point3D,System.Boolean)">
            <summary>
            Returns the closest point on the line to the given point.
            </summary>
            <param name="p">The point that the returned point is the closest point on the line to</param>
            <param name="mustBeOnSegment">If true the returned point is contained by the segment ends, otherwise it can be anywhere on the projected line</param>
            <returns>The closest point on the line to the provided point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.ProjectOn(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            The line projected on a plane
            </summary>
            <param name="plane">The plane.</param>
            <returns>A projected line.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.IntersectionWith(MathNet.Spatial.Euclidean.Plane,System.Double)">
            <summary>
            Find the intersection between the line and a plane
            </summary>
            <param name="plane">The plane.</param>
            <param name="tolerance">A tolerance (epsilon) to compensate for floating point error</param>
            <returns>A point where the line and plane intersect; null if no such point exists</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.IsParallelTo(MathNet.Spatial.Euclidean.Line3D)">
            <summary>
            Checks to determine whether or not two lines are parallel to each other, using the dot product within
            the double precision specified in the MathNet.Numerics package.
            </summary>
            <param name="other">The other line to check this one against</param>
            <returns>True if the lines are parallel, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.IsParallelTo(MathNet.Spatial.Euclidean.Line3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Checks to determine whether or not two lines are parallel to each other within a specified angle tolerance
            </summary>
            <param name="other">The other line to check this one against</param>
            <param name="angleTolerance">If the angle between line directions is less than this value, the method returns true</param>
            <returns>True if the lines are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.ClosestPointsBetween(MathNet.Spatial.Euclidean.Line3D)">
            <summary>
            Computes the pair of points which represent the closest distance between this Line3D and another Line3D, with the first
            point being the point on this Line3D, and the second point being the corresponding point on the other Line3D.  If the lines
            intersect the points will be identical, if the lines are parallel the first point will be the start point of this line.
            </summary>
            <param name="other">line to compute the closest points with</param>
            <returns>A tuple of two points representing the endpoints of the shortest distance between the two lines</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.ClosestPointsBetween(MathNet.Spatial.Euclidean.Line3D,System.Boolean)">
            <summary>
            Computes the pair of points which represents the closest distance between this Line3D and another Line3D, with the option
            of treating the lines as segments bounded by their start and end points.
            </summary>
            <param name="other">line to compute the closest points with</param>
            <param name="mustBeOnSegments">if true, the lines are treated as segments bounded by the start and end point</param>
            <returns>A tuple of two points representing the endpoints of the shortest distance between the two lines or segments</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.Equals(MathNet.Spatial.Euclidean.Line3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Line3D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.LineSegment2D">
            <summary>
            This structure represents a line between two points in 2-space.  It allows for operations such as
            computing the length, direction, comparisons, and shifting by a vector.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.LineSegment2D.StartPoint">
            <summary>
            The starting point of the line segment
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.LineSegment2D.EndPoint">
            <summary>
            The end point of the line segment
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.#ctor(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.LineSegment2D"/> struct.
            Throws an ArgumentException if the <paramref name="startPoint"/> is equal to the <paramref name="endPoint"/>.
            </summary>
            <param name="startPoint">the starting point of the line segment.</param>
            <param name="endPoint">the ending point of the line segment</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.LineSegment2D.Length">
            <summary>
            Gets the distance from <see cref="F:MathNet.Spatial.Euclidean.LineSegment2D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.LineSegment2D.EndPoint"/>
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.LineSegment2D.Direction">
            <summary>
            Gets a normalized vector in the direction from <see cref="F:MathNet.Spatial.Euclidean.LineSegment2D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.LineSegment2D.EndPoint"/>
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.op_Equality(MathNet.Spatial.Euclidean.LineSegment2D,MathNet.Spatial.Euclidean.LineSegment2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.op_Inequality(MathNet.Spatial.Euclidean.LineSegment2D,MathNet.Spatial.Euclidean.LineSegment2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.Parse(System.String,System.String)">
            <summary>
            Returns a new <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> from a pair of strings which represent points.
            See <see cref="M:MathNet.Spatial.Euclidean.Point2D.Parse(System.String,System.IFormatProvider)" /> for details on acceptable formats.
            </summary>
            <param name="startPointString">The string representation of the first point.</param>
            <param name="endPointString">The string representation of the second point.</param>
            <returns>A line segment from the first point to the second point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.TranslateBy(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Translates a line according to a provided vector
            </summary>
            <param name="vector">A vector to apply</param>
            <returns>A new translated line segment</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.LineTo(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns a new line segment between the closest point on this line segment and a point.
            </summary>
            <param name="p">the point to create a line to</param>
            <returns>A line segment between the point and the nearest point on this segment.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.ClosestPointTo(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns the closest point on the line to the given point.
            </summary>
            <param name="p">The point that the returned point is the closest point on the line to</param>
            <returns>The closest point on the line to the provided point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.TryIntersect(MathNet.Spatial.Euclidean.LineSegment2D,MathNet.Spatial.Euclidean.Point2D@,MathNet.Spatial.Units.Angle)">
            <summary>
            Compute the intersection between two lines if the angle between them is greater than a specified
            angle tolerance.
            </summary>
            <param name="other">The other line to compute the intersection with</param>
            <param name="intersection">When this method returns, contains the intersection point, if the conversion succeeded, or the default point if the conversion failed.</param>
            <param name="tolerance">The tolerance used when checking if the lines are parallel</param>
            <returns>True if an intersection exists; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.IsParallelTo(MathNet.Spatial.Euclidean.LineSegment2D,MathNet.Spatial.Units.Angle)">
            <summary>
            Checks to determine whether or not two line segments are parallel to each other within a specified angle tolerance
            </summary>
            <param name="other">The other line to check this one against</param>
            <param name="tolerance">If the angle between line directions is less than this value, the method returns true</param>
            <returns>True if the lines are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.Equals(MathNet.Spatial.Euclidean.LineSegment2D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of line segments are equal
            </summary>
            <param name="other">The line segment to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the line segments are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.Equals(MathNet.Spatial.Euclidean.LineSegment2D)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.LineSegment3D">
            <summary>
            This structure represents a line between two points in 3D-space.  It allows for operations such as
            computing the length, direction, comparisons, and shifting by a vector.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.LineSegment3D.StartPoint">
            <summary>
            The starting point of the line segment
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.LineSegment3D.EndPoint">
            <summary>
            The end point of the line segment
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.LineSegment3D"/> struct.
            Throws an ArgumentException if the <paramref name="startPoint"/> is equal to the <paramref name="endPoint"/>.
            </summary>
            <param name="startPoint">the starting point of the line segment.</param>
            <param name="endPoint">the ending point of the line segment</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.LineSegment3D.Length">
            <summary>
            Gets the distance from <see cref="F:MathNet.Spatial.Euclidean.LineSegment3D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.LineSegment3D.EndPoint"/>
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.LineSegment3D.Direction">
            <summary>
            Gets a normalized vector in the direction from <see cref="F:MathNet.Spatial.Euclidean.LineSegment3D.StartPoint"/> to <see cref="F:MathNet.Spatial.Euclidean.LineSegment3D.EndPoint"/>
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.op_Equality(MathNet.Spatial.Euclidean.LineSegment3D,MathNet.Spatial.Euclidean.LineSegment3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.op_Inequality(MathNet.Spatial.Euclidean.LineSegment3D,MathNet.Spatial.Euclidean.LineSegment3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.Parse(System.String,System.String)">
            <summary>
            Returns a new <see cref="T:MathNet.Spatial.Euclidean.Line2D"/> from a pair of strings which represent points.
            See <see cref="M:MathNet.Spatial.Euclidean.Point2D.Parse(System.String,System.IFormatProvider)" /> for details on acceptable formats.
            </summary>
            <param name="startPointString">The string representation of the first point.</param>
            <param name="endPointString">The string representation of the second point.</param>
            <returns>A line segment from the first point to the second point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.TranslateBy(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Translates a line according to a provided vector
            </summary>
            <param name="vector">A vector to apply</param>
            <returns>A new translated line segment</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.ClosestPointTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns the closest point on the line segment to the given point.
            </summary>
            <param name="p">The point that the returned point is the closest point on the line to</param>
            <returns>The closest point on the line to the provided point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.LineTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns a new line segment between the closest point on this line segment and a point.
            </summary>
            <param name="p">the point to create a line to</param>
            <returns>A line segment between the nearest point on this segment and the provided point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.TryShortestLineTo(MathNet.Spatial.Euclidean.LineSegment3D,MathNet.Spatial.Units.Angle,MathNet.Spatial.Euclidean.LineSegment3D@)">
            <summary>
            Computes the pair of points which represents the closest distance between this Line3D and another Line3D, with the option
            of treating the lines as segments bounded by their start and end points.
            </summary>
            <param name="other">line to compute the closest points with</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <param name="closestLine">A line representing the endpoints of the shortest distance between the two segments</param>
            <returns>True if a line could be found, false if the lines intersect</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.IsParallelTo(MathNet.Spatial.Euclidean.LineSegment3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Checks to determine whether or not two line segments are parallel to each other within a specified angle tolerance
            </summary>
            <param name="other">The other line to check this one against</param>
            <param name="tolerance">If the angle between line directions is less than this value, the method returns true</param>
            <returns>True if the lines are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.Equals(MathNet.Spatial.Euclidean.LineSegment3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of line segments are equal
            </summary>
            <param name="other">The line segment to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the line segments are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.Equals(MathNet.Spatial.Euclidean.LineSegment3D)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.ClosestLinePointTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Extends the segment to a infinite line and finds the closest point on that line to the provided point.
            </summary>
            <param name="p">a point</param>
            <returns>A point on the infinite line which extends the segment</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.LineSegment3D.ClosestPointsBetweenLines(MathNet.Spatial.Euclidean.LineSegment3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Computes the pair of points which represent the closest distance between this Line3D and another Line3D, with the first
            point being the point on this Line3D, and the second point being the corresponding point on the other Line3D.  If the lines
            intersect the points will be identical, if the lines are parallel the first point will be the start point of this line.
            </summary>
            <param name="other">line to compute the closest points with</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>A tuple of two points representing the endpoints of the shortest distance between the two lines</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Matrix2D">
            <summary>
            Helper class for creating matrices for manipulating 2D-elements
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix2D.Rotation(MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a rotation about the z-axis
            </summary>
            <param name="rotation">The angle of rotation</param>
            <returns>A transform matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix2D.Create(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an arbitrary 2D transform
            </summary>
            <param name="m11">Element at m[1,1]</param>
            <param name="m12">Element at m[1,2]</param>
            <param name="m21">Element at m[2,1]</param>
            <param name="m22">Element at m[2,2]</param>
            <returns>A transform matrix</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Matrix3D">
            <summary>
            Helper class for working with 3D matrixes
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationAroundXAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a rotation matrix around the X axis
            </summary>
            <param name="angle">The angle to rotate</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationAroundYAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a rotation matrix around the Y axis
            </summary>
            <param name="angle">The angle to rotate</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationAroundZAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a rotation matrix around the Z axis
            </summary>
            <param name="angle">The angle to rotate</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationTo(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D,System.Nullable{MathNet.Spatial.Euclidean.UnitVector3D})">
            <summary>
            Sets to the matrix of rotation that would align the 'from' vector with the 'to' vector.
            The optional Axis argument may be used when the two vectors are parallel and in opposite directions to specify a specific solution, but is otherwise ignored.
            </summary>
            <param name="fromVector">Input Vector object to align from.</param>
            <param name="toVector">Input Vector object to align to.</param>
            <param name="axis">Input Vector object.</param>
            <returns>A transform matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D,System.Nullable{MathNet.Spatial.Euclidean.UnitVector3D})">
            <summary>
            Sets to the matrix of rotation that would align the 'from' vector with the 'to' vector.
            The optional Axis argument may be used when the two vectors are parallel and in opposite directions to specify a specific solution, but is otherwise ignored.
            </summary>
            <param name="fromVector">Input Vector object to align from.</param>
            <param name="toVector">Input Vector object to align to.</param>
            <param name="axis">Input Vector object. </param>
            <returns>A transform matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Matrix3D.RotationAroundArbitraryVector(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a rotation matrix around an arbitrary vector
            </summary>
            <param name="aboutVector">The vector</param>
            <param name="angle">Angle in degrees</param>
            <returns>A transform matrix</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Plane">
            <summary>
            A geometric plane
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Plane.Normal">
            <summary>
            The normal vector of the Plane.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Plane.D">
            <summary>
            The distance to the Plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Plane"/> struct.
            Constructs a Plane from the X, Y, and Z components of its normal, and its distance from the origin on that normal.
            </summary>
            <param name="x">The X-component of the normal.</param>
            <param name="y">The Y-component of the normal.</param>
            <param name="z">The Z-component of the normal.</param>
            <param name="d">The distance of the Plane along its normal from the origin.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.#ctor(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Plane"/> struct.
            Constructs a Plane from the given normal and distance along the normal from the origin.
            </summary>
            <param name="normal">The Plane's normal vector.</param>
            <param name="offset">The Plane's distance from the origin along its normal vector.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.#ctor(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Plane"/> struct.
            Constructs a Plane from the given normal and distance along the normal from the origin.
            </summary>
            <param name="normal">The Plane's normal vector.</param>
            <param name="rootPoint">A point in the plane.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Plane"/> struct.
            Constructs a Plane from the given normal and distance along the normal from the origin.
            </summary>
            <param name="normal">The Plane's normal vector.</param>
            <param name="rootPoint">A point in the plane.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Plane.A">
            <summary>
            Gets the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/> x component.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Plane.B">
            <summary>
            Gets the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/> y component.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Plane.C">
            <summary>
            Gets the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/> y component.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Plane.RootPoint">
            <summary>
            Gets the point on the plane closest to origin.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.op_Equality(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified geometric planes is equal.
            </summary>
            <param name="left">The first plane to compare.</param>
            <param name="right">The second plane to compare.</param>
            <returns>True if the geometric planes are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.op_Inequality(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified geometric planes is not equal.
            </summary>
            <param name="left">The first plane to compare.</param>
            <param name="right">The second plane to compare.</param>
            <returns>True if the geometric planes are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.FromPoints(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Plane"/> struct.
            Creates a plane that contains the three given points.
            </summary>
            <param name="p1">The first point on the plane.</param>
            <param name="p2">The second point on the plane.</param>
            <param name="p3">The third point on the plane.</param>
            <returns>The plane containing the three points.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.PointFromPlanes(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns a point of intersection between three planes
            </summary>
            <param name="plane1">The first plane</param>
            <param name="plane2">The second plane</param>
            <param name="plane3">The third plane</param>
            <returns>The intersection point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.SignedDistanceTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Get the distance to the point along the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/>
            </summary>
            <param name="point">The <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></param>
            <returns>The distance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.SignedDistanceTo(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Get the distance to the plane along the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/>
            This assumes the planes are parallel
            </summary>
            <param name="other">The <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></param>
            <returns>The distance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.SignedDistanceTo(MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Get the distance to the ThroughPoint of <paramref name="ray"/>  along the <see cref="F:MathNet.Spatial.Euclidean.Plane.Normal"/>
            This assumes the ray is parallel to the plane.
            </summary>
            <param name="ray">The <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></param>
            <returns>The distance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.AbsoluteDistanceTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Get the distance to the point.
            </summary>
            <param name="point">The <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></param>
            <returns>The distance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.Point3D,System.Nullable{MathNet.Spatial.Euclidean.UnitVector3D})">
            <summary>
            Projects a point onto the plane
            </summary>
            <param name="p">A point</param>
            <param name="projectionDirection">The direction of projection</param>
            <returns>a projected point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.Line3D)">
            <summary>
            Projects a line onto the plane
            </summary>
            <param name="line3DToProject">The line to project</param>
            <returns>A projected line</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.LineSegment3D)">
            <summary>
            Projects a line onto the plane
            </summary>
            <param name="line3DToProject">The line to project</param>
            <returns>A projected line</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Projects a ray onto the plane
            </summary>
            <param name="rayToProject">The ray to project</param>
            <returns>A projected ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Project Vector3D onto this plane
            </summary>
            <param name="vector3DToProject">The Vector3D to project</param>
            <returns>The projected Vector3D</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Project(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Project Vector3D onto this plane
            </summary>
            <param name="vector3DToProject">The Vector3D to project</param>
            <returns>The projected Vector3D</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.IntersectionWith(MathNet.Spatial.Euclidean.Plane,System.Double)">
            <summary>
            Finds the intersection of the two planes, throws if they are parallel
            http://mathworld.wolfram.com/Plane-PlaneIntersection.html
            </summary>
            <param name="intersectingPlane">a plane which intersects</param>
            <param name="tolerance">A tolerance (epsilon) to account for floating point error.</param>
            <returns>A ray at the intersection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.IntersectionWith(MathNet.Spatial.Euclidean.Line3D,System.Double)">
            <summary>
            Find intersection between Line3D and Plane
            http://geomalgorithms.com/a05-_intersect-1.html
            </summary>
            <param name="line">A line segment</param>
            <param name="tolerance">A tolerance (epsilon) to account for floating point error.</param>
            <returns>Intersection Point or null</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.IntersectionWith(MathNet.Spatial.Euclidean.LineSegment3D,System.Double)">
            <summary>
            Find intersection between LineSegment3D and Plane
            http://geomalgorithms.com/a05-_intersect-1.html
            </summary>
            <param name="line">A line segment</param>
            <param name="tolerance">A tolerance (epsilon) to account for floating point error.</param>
            <returns>Intersection Point or null</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.IntersectionWith(MathNet.Spatial.Euclidean.Ray3D,System.Double)">
            <summary>
            http://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld017.htm
            </summary>
            <param name="ray">A ray</param>
            <param name="tolerance">A tolerance (epsilon) to account for floating point error.</param>
            <returns>The point of intersection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.MirrorAbout(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns <paramref name="p"/> mirrored about the plane.
            </summary>
            <param name="p">The <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></param>
            <returns>The mirrored point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Rotate(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates a plane
            </summary>
            <param name="aboutVector">The vector about which to rotate</param>
            <param name="angle">An angle to rotate</param>
            <returns>A rotated plane</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Equals(MathNet.Spatial.Euclidean.Plane,System.Double)">
            <summary>
            Returns a value to indicate if a pair of geometric planes are equal
            </summary>
            <param name="other">The geometric plane to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the geometric planes are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Equals(MathNet.Spatial.Euclidean.Plane)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Plane.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Point2D">
            <summary>
            Represents a point in 2 dimensional space
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Point2D.X">
            <summary>
            The x coordinate
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Point2D.Y">
            <summary>
            The y coordinate
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Point2D"/> struct.
            Creates a point for given coordinates (x, y)
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Point2D.Origin">
            <summary>
            Gets a point at the origin (0,0)
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.op_Addition(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Adds a point and a vector together
            </summary>
            <param name="point">A point</param>
            <param name="vector">A vector</param>
            <returns>A new point at the summed location</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.op_Subtraction(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Subtracts a vector from a point
            </summary>
            <param name="left">A point</param>
            <param name="right">A vector</param>
            <returns>A new point at the difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.op_Subtraction(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Subtracts the first point from the second point
            </summary>
            <param name="left">The first point</param>
            <param name="right">The second point</param>
            <returns>A vector pointing to the difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.op_Equality(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified points is equal.
            </summary>
            <param name="left">The first point to compare</param>
            <param name="right">The second point to compare</param>
            <returns>True if the points are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.op_Inequality(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified points is not equal.
            </summary>
            <param name="left">The first point to compare</param>
            <param name="right">The second point to compare</param>
            <returns>True if the points are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.FromPolar(System.Double,MathNet.Spatial.Units.Angle)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Point2D"/> struct.
            Creates a point r from origin rotated a counterclockwise from X-Axis
            </summary>
            <param name="radius">distance from origin</param>
            <param name="angle">the angle</param>
            <returns>The <see cref="T:MathNet.Spatial.Euclidean.Point2D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.TryParse(System.String,MathNet.Spatial.Euclidean.Point2D@)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Euclidean.Point2D@)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <returns>A point at the coordinates specified</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Euclidean.Point2D"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Euclidean.Point2D"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Euclidean.Point2D"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Centroid(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D})">
            <summary>
            Returns the centeroid or center of mass of any set of points
            </summary>
            <param name="points">a list of points</param>
            <returns>the centeroid point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Centroid(MathNet.Spatial.Euclidean.Point2D[])">
            <summary>
            Returns the centeroid or center of mass of any set of points
            </summary>
            <param name="points">a list of points</param>
            <returns>the centeroid point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.MidPoint(MathNet.Spatial.Euclidean.Point2D,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns a point midway between the provided points <paramref name="point1"/> and <paramref name="point2"/>
            </summary>
            <param name="point1">point A</param>
            <param name="point2">point B</param>
            <returns>a new point midway between the provided points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new Point2D from a Math.NET Numerics vector of length 2.
            </summary>
            <param name="vector"> A vector with length 2 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Euclidean.Point2D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Applies a transform matrix to the point
            </summary>
            <param name="m">A transform matrix</param>
            <returns>A new point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.VectorTo(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Gets a vector from this point to another point
            </summary>
            <param name="otherPoint">The point to which the vector should go</param>
            <returns>A vector pointing to the other point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.DistanceTo(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Finds the straight line distance to another point
            </summary>
            <param name="otherPoint">The other point</param>
            <returns>a distance measure</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ToVector2D">
            <summary>
            Converts this point into a vector from the origin
            </summary>
            <returns>A vector equivalent to this point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 2.
            </summary>
            <returns> A <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> with the x and y values from this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Equals(MathNet.Spatial.Euclidean.Point2D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of points are equal
            </summary>
            <param name="other">The point to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the points are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Equals(MathNet.Spatial.Euclidean.Point2D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point2D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Point3D">
            <summary>
            Represents a point in 3 dimensional space
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Point3D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Point3D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Point3D.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Point3D"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Point3D.Origin">
            <summary>
            Gets a point at the origin
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Point3D.NaN">
            <summary>
            Gets a point where all values are NAN
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Addition(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Adds a point and a vector together
            </summary>
            <param name="point">A point</param>
            <param name="vector">A vector</param>
            <returns>A new point at the summed location</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Addition(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Adds a point and a vector together
            </summary>
            <param name="point">A point</param>
            <param name="vector">A vector</param>
            <returns>A new point at the summed location</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Subtraction(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Subtracts a vector from a point
            </summary>
            <param name="point">A point</param>
            <param name="vector">A vector</param>
            <returns>A new point at the difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Subtraction(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Subtracts a vector from a point
            </summary>
            <param name="point">A point</param>
            <param name="vector">A vector</param>
            <returns>A new point at the difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Subtraction(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Subtracts the first point from the second point
            </summary>
            <param name="left">The first point</param>
            <param name="right">The second point</param>
            <returns>A vector pointing to the difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Equality(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified points is equal.
            </summary>
            <param name="left">The first point to compare</param>
            <param name="right">The second point to compare</param>
            <returns>True if the points are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.op_Inequality(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified points is not equal.
            </summary>
            <param name="left">The first point to compare</param>
            <param name="right">The second point to compare</param>
            <returns>True if the points are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.TryParse(System.String,MathNet.Spatial.Euclidean.Point3D@)">
            <summary>
            Attempts to convert a string of the form x,y,z into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">A point with the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Euclidean.Point3D@)">
            <summary>
            Attempts to convert a string of the form x,y,z into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert a string of the form x,y,z into a point
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <returns>A point at the coordinates specified</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new <see cref="T:MathNet.Spatial.Euclidean.Point3D"/> from a Math.NET Numerics vector of length 3.
            </summary>
            <param name="vector"> A vector with length 2 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Euclidean.Point3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Euclidean.Point3D"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Euclidean.Point3D"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Euclidean.Point3D"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Centroid(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point3D})">
            <summary>
            Returns the centroid of an arbitrary collection of points
            </summary>
            <param name="points">a list of points</param>
            <returns>The centroid of the points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Centroid(MathNet.Spatial.Euclidean.Point3D[])">
            <summary>
            Returns the centroid of an arbitrary collection of points
            </summary>
            <param name="points">a list of points</param>
            <returns>The centroid of the points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.MidPoint(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns the midpoint of two points
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <returns>The midpoint of the points</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.IntersectionOf(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns the point at which three planes intersect
            </summary>
            <param name="plane1">The first plane</param>
            <param name="plane2">The second plane</param>
            <param name="plane3">The third plane</param>
            <returns>The point of intersection</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.IntersectionOf(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Returns the point of intersection between a plane and a ray
            </summary>
            <param name="plane">A geometric plane</param>
            <param name="ray">a ray</param>
            <returns>The point of intersection</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.MirrorAbout(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns the mirror point of this point across a plane
            </summary>
            <param name="plane">A plane</param>
            <returns>The mirrored point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ProjectOn(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Projects a point onto a plane
            </summary>
            <param name="plane">a plane</param>
            <returns>The projected point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Rotate(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates the point about a given vector
            </summary>
            <param name="aboutVector">A vector</param>
            <param name="angle">The angle to rotate</param>
            <returns>The rotated point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Rotate(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates the point about a given vector
            </summary>
            <param name="aboutVector">A vector</param>
            <param name="angle">The angle to rotate</param>
            <returns>The rotated point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.VectorTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Gets a vector from this point to another point
            </summary>
            <param name="p">The point to which the vector should go</param>
            <returns>A vector pointing to the other point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.DistanceTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Finds the straight line distance to another point
            </summary>
            <param name="p">The other point</param>
            <returns>a distance measure</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ToVector3D">
            <summary>
            Converts this point into a vector from the origin
            </summary>
            <returns>A vector equivalent to this point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.TransformBy(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Applies a transform coordinate system to the point
            </summary>
            <param name="cs">A coordinate system</param>
            <returns>A new 3D point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Applies a transform matrix to the point
            </summary>
            <param name="m">A transform matrix</param>
            <returns>A new point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 3.
            </summary>
            <returns>A Math.Net Numerics vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Equals(MathNet.Spatial.Euclidean.Point3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of points are equal
            </summary>
            <param name="other">The point to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the points are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Equals(MathNet.Spatial.Euclidean.Point3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Point3D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Polygon2D">
            <summary>
            Class to represent a closed polygon.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Polygon2D.points">
            <summary>
            A list of vertices.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Polygon2D.edges">
            <summary>
            A list of edges.  This list is lazy loaded on demand.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.#ctor(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Polygon2D"/> class.
            At least three points are needed to construct a polygon.  If less are passed an ArgumentException is thrown.
            </summary>
            <param name="vertices">A list of vertices.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.#ctor(MathNet.Spatial.Euclidean.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Polygon2D"/> class.
            At least three points are needed to construct a polygon.  If less are passed an ArgumentException is thrown.
            </summary>
            <param name="vertices">A list of vertices.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Polygon2D.Vertices">
            <summary>
            Gets a list of vertices
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Polygon2D.Edges">
            <summary>
            Gets a list of Edges
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Polygon2D.VertexCount">
            <summary>
            Gets the number of vertices in the polygon.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.op_Equality(MathNet.Spatial.Euclidean.Polygon2D,MathNet.Spatial.Euclidean.Polygon2D)">
            <summary>
            Returns a value that indicates whether each point in two specified polygons is equal.
            </summary>
            <param name="left">The first polygon to compare</param>
            <param name="right">The second polygon to compare</param>
            <returns>True if the polygons are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.op_Inequality(MathNet.Spatial.Euclidean.Polygon2D,MathNet.Spatial.Euclidean.Polygon2D)">
            <summary>
            Returns a value that indicates whether any point in two specified polygons is not equal.
            </summary>
            <param name="left">The first polygon to compare</param>
            <param name="right">The second polygon to compare</param>
            <returns>True if the polygons are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.ArePolygonVerticesColliding(MathNet.Spatial.Euclidean.Polygon2D,MathNet.Spatial.Euclidean.Polygon2D)">
            <summary>
            Compute whether or not two polygons are colliding based on whether or not the vertices of
            either are enclosed within the shape of the other. This is a simple means of detecting collisions
            that can fail if the two polygons are heavily overlapped in such a way that one protrudes through
            the other and out its opposing side without any vertices being enclosed.
            </summary>
            <param name="a">The first polygon.</param>
            <param name="b">The second polygon</param>
            <returns>True if the vertices collide; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.GetConvexHullFromPoints(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D},System.Boolean)">
            <summary>
            Using algorithm from Ouellet - https://www.codeproject.com/Articles/1210225/Fast-and-improved-D-Convex-Hull-algorithm-and-its, take an IEnumerable of Point2Ds and computes the
            two dimensional convex hull, returning it as a Polygon2D object.
            </summary>
            <param name="pointList">A list of points</param>
            <param name="clockWise">
            In which direction to return the points on the convex hull.
            If true, clockwise. Otherwise counter clockwise
            </param>
            <returns>A polygon.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.EnclosesPoint(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Test whether a point is enclosed within a polygon. Points on the polygon edges are not
            counted as contained within the polygon.
            </summary>
            <param name="p">A point.</param>
            <returns>True if the point is inside the polygon; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.ReduceComplexity(System.Double)">
            <summary>
            Creates a new polygon from the existing polygon by removing any edges whose adjacent segments are considered colinear within the provided tolerance
            </summary>
            <param name="singleStepTolerance">The tolerance by which adjacent edges should be considered collinear.</param>
            <returns>A polygon</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.Rotate(MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a polygon rotated around the origin
            </summary>
            <param name="angle">The angle by which to rotate.</param>
            <returns>A new polygon that has been rotated.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.TranslateBy(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Returns a new polygon which is translated (moved) by a vector
            </summary>
            <param name="vector">A vector.</param>
            <returns>A new polygon that has been translated.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.RotateAround(MathNet.Spatial.Units.Angle,MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Rotate the polygon around the specified point
            </summary>
            <param name="angle">The angle by which to rotate</param>
            <param name="center">A point at which to rotate around</param>
            <returns>A new polygon that has been rotated.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.ToPolyLine2D">
            <summary>
            Converts the polygon into a PolyLine2D
            </summary>
            <returns>A polyline</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.Equals(MathNet.Spatial.Euclidean.Polygon2D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of polygons are equal
            </summary>
            <param name="other">The polygon to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the polygons are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.Equals(MathNet.Spatial.Euclidean.Polygon2D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Polygon2D.PopulateEdgeList">
            <summary>
            Populates the edge list
            </summary>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.PolyLine2D">
            <summary>
            The PolyLine2D class represents a 2D curve in space made up of line segments joined end-to-end, and is
            stored as a sequential list of 2D points.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.PolyLine2D.points">
            <summary>
            Internal storage for the points
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.#ctor(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.PolyLine2D"/> class.
            Creates a PolyLine2D from a pre-existing IEnumerable of Point2Ds
            </summary>
            <param name="points">A list of points.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine2D.VertexCount">
            <summary>
            Gets the number of vertices in the polyline.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine2D.Length">
            <summary>
            Gets the length of the polyline as the sum of the length of the individual segments
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine2D.Vertices">
            <summary>
            Gets a list of vertices
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.op_Equality(MathNet.Spatial.Euclidean.PolyLine2D,MathNet.Spatial.Euclidean.PolyLine2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.op_Inequality(MathNet.Spatial.Euclidean.PolyLine2D,MathNet.Spatial.Euclidean.PolyLine2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.ReduceComplexity(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D},System.Double)">
            <summary>
            Reduce the complexity of a manifold of points represented as an IEnumerable of Point2D objects by
            iteratively removing all nonadjacent points which would each result in an error of less than the
            single step tolerance if removed.  Iterate until no further changes are made.
            </summary>
            <param name="points">A list of points.</param>
            <param name="singleStepTolerance">The tolerance (epsilon) for comparing sameness of line segments</param>
            <returns>A new PolyLine2D with same segments merged.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.GetPointAtFractionAlongCurve(System.Double)">
            <summary>
            Get the point at a fractional distance along the curve.  For instance, fraction=0.5 will return
            the point halfway along the length of the polyline.
            </summary>
            <param name="fraction">The fractional length at which to compute the point</param>
            <returns>A point a fraction of the way along the line.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.GetPointAtLengthFromStart(System.Double)">
            <summary>
            Get the point at a specified distance along the curve.  A negative argument will return the first point,
            an argument greater than the length of the curve will return the last point.
            </summary>
            <param name="lengthFromStart">The distance from the first point along the curve at which to return a point</param>
            <returns>A point which is the specified distance along the line</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.ClosestPointTo(MathNet.Spatial.Euclidean.Point2D)">
            <summary>
            Returns the closest point on the polyline to the given point.
            </summary>
            <param name="p">a point</param>
            <returns>A point which is the closest to the given point but still on the line.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.Equals(MathNet.Spatial.Euclidean.PolyLine2D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of polylines are equal
            </summary>
            <param name="other">The polyline to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the polylines are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.Equals(MathNet.Spatial.Euclidean.PolyLine2D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.ReduceComplexitySingleStep(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D},System.Double)">
            <summary>
            Reduce the complexity of a manifold of points represented as an IEnumerable of Point2D objects.
            This algorithm goes through each point in the manifold and computes the error that would be introduced
            from the original if that point were removed.  Then it removes nonadjacent points to produce a
            reduced size manifold.
            </summary>
            <param name="points">A list of points</param>
            <param name="tolerance">Tolerance (Epsilon) to apply to determine if segments are to be merged.</param>
            <returns>A new list of points minus any segment which was merged.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine2D.GetPolyLineLength">
            <summary>
            Computes the length of the polyline by summing the lengths of the individual segments
            </summary>
            <returns>The length of the line</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.PolyLine3D">
            <summary>
            A PolyLine is an ordered series of line segments in space represented as list of connected Point3Ds.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.PolyLine3D.points">
            <summary>
            An internal list of points
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.#ctor(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point3D})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.PolyLine3D"/> class.
            Creates a PolyLine3D from a pre-existing IEnumerable of Point3Ds
            </summary>
            <param name="points">A list of points.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine3D.VertexCount">
            <summary>
            Gets the number of vertices in the polyline.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine3D.Length">
            <summary>
            Gets the length of the polyline, computed as the sum of the lengths of every segment
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.PolyLine3D.Vertices">
            <summary>
            Gets a list of vertices
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.op_Equality(MathNet.Spatial.Euclidean.PolyLine3D,MathNet.Spatial.Euclidean.PolyLine3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified lines is equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.op_Inequality(MathNet.Spatial.Euclidean.PolyLine3D,MathNet.Spatial.Euclidean.PolyLine3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified lines is not equal.
            </summary>
            <param name="left">The first line to compare</param>
            <param name="right">The second line to compare</param>
            <returns>True if the lines are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.GetPointAtFractionAlongCurve(System.Double)">
            <summary>
            Get the point at a fractional distance along the curve.  For instance, fraction=0.5 will return
            the point halfway along the length of the polyline.
            </summary>
            <param name="fraction">The fractional length at which to compute the point</param>
            <returns>A point a fraction of the way along the line.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.GetPointAtLengthFromStart(System.Double)">
            <summary>
            Get the point at a specified distance along the curve.  A negative argument will return the first point,
            an argument greater than the length of the curve will return the last point.
            </summary>
            <param name="lengthFromStart">The distance from the first point along the curve at which to return a point</param>
            <returns>A point which is the specified distance along the line</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.ClosestPointTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns the closest point on the polyline to the given point.
            </summary>
            <param name="p">A point</param>
            <returns>A point which is the closest to the given point but still on the line.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.Equals(MathNet.Spatial.Euclidean.PolyLine3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of polylines are equal
            </summary>
            <param name="other">The polyline to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the polylines are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.Equals(MathNet.Spatial.Euclidean.PolyLine3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.PolyLine3D.GetPolyLineLength">
            <summary>
            Returns the length of the polyline by summing the lengths of the individual segments
            </summary>
            <returns>The length of the line.</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Quaternion">
            <summary>Quaternion Number</summary>
            <remarks>
            http://en.wikipedia.org/wiki/Quaternion
            http://mathworld.wolfram.com/Quaternion.html
            http://web.cs.iastate.edu/~cs577/handouts/quaternion.pdf
            http://www.lce.hut.fi/~ssarkka/pub/quat.pdf
            </remarks>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.One">
            <summary>
            Neutral element for multiplication
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.Zero">
            <summary>
            Neutral element for sum
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.w">
            <summary>
            Specifies the rotation component of the Quaternion.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.x">
            <summary>
            Specifies the X-value of the vector component of the Quaternion
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.y">
            <summary>
            Specifies the Y-value of the vector component of the Quaternion
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Quaternion.z">
            <summary>
            Specifies the Z-value of the vector component of the Quaternion
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Quaternion"/> struct.
            </summary>
            <param name="real">The rotation component of the Quaternion</param>
            <param name="imagX">The X-value of the vector component of the Quaternion</param>
            <param name="imagY">The Y-value of the vector component of the Quaternion</param>
            <param name="imagZ">The Z-value of the vector component of the Quaternion</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Quaternion"/> struct.
            Given a Vector (w,x,y,z), transforms it into a Quaternion = w+xi+yj+zk
            </summary>
            <param name="v">The vector to transform into a Quaternion</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Real">
            <summary>
            Gets the real part of the quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.ImagX">
            <summary>
            Gets the imaginary X part (coefficient of complex I) of the quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.ImagY">
            <summary>
            Gets the imaginary Y part (coefficient of complex J) of the quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.ImagZ">
            <summary>
            Gets the imaginary Z part (coefficient of complex K) of the quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.NormSquared">
            <summary>
            Gets the sum of the squares of the four components.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Norm">
            <summary>
            Gets the norm of the quaternion q: square root of the sum of the squares of the four components.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Arg">
            <summary>
            Gets the argument phi = arg(q) of the quaternion q, such that q = r*(cos(phi) +
            u*sin(phi)) = r*exp(phi*u) where r is the absolute and u the unit vector of
            q.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.IsUnitQuaternion">
            <summary>
            Gets a value indicating whether the quaternion q has length |q| = 1.
            </summary>
            <remarks>
            To normalize a quaternion to a length of 1, use the <see cref="P:MathNet.Spatial.Euclidean.Quaternion.Normalized"/> method.
            All unit quaternions form a 3-sphere.
            </remarks>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Scalar">
            <summary>
            Gets a new Quaternion q with the Scalar part only.
            If you need a Double, use the Real-Field instead.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Vector">
            <summary>
            Gets a new Quaternion q with the Vector part only.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.NormalizedVector">
            <summary>
            Gets a new normalized Quaternion u with the Vector part only, such that ||u|| = 1.
            Q may then be represented as q = r*(cos(phi) + u*sin(phi)) = r*exp(phi*u) where r is the absolute and phi the argument of q.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Normalized">
            <summary>
            Gets a new normalized Quaternion q with the direction of this quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.Inversed">
            <summary>
            Gets an inverted quaternion. Inversing Zero returns Zero
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.IsNan">
            <summary>
            Gets a value indicating whether the quaternion is not a number
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Quaternion.IsInfinity">
            <summary>
            Gets a value indicating whether the quaternion is not a number
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_UnaryNegation(MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Negate a quaternion.
            </summary>
            <param name="q">The quaternion to negate</param>
            <returns>A negated quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Addition(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Add a quaternion to a quaternion.
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <returns>The sum of two quaternions</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Addition(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Add a floating point number to a quaternion.
            </summary>
            <param name="q1">a quaternion</param>
            <param name="d">a number to add</param>
            <returns>A quaternion whose real value is increased by a scalar</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Addition(System.Double,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Add a quaternion to a floating point number.
            </summary>
            <param name="d">a number to add</param>
            <param name="q">a quaternion</param>
            <returns>A quaternion whose real value is increased by a scalar</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Subtraction(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Subtract a quaternion from a quaternion.
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <returns>The quaternion difference</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Subtraction(System.Double,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Subtract a floating point number from a quaternion.
            </summary>
            <param name="d">a number to subtract</param>
            <param name="q">a quaternion</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Subtraction(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Subtract a floating point number from a quaternion.
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a number to subtract</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Multiply(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Multiply a quaternion with a quaternion.
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Multiply(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Multiply a floating point number with a quaternion.
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a scalar</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Multiply(System.Double,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Multiply a floating point number with a quaternion.
            </summary>
            <param name="d">a scalar</param>
            <param name="q">a quaternion</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Division(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Divide a quaternion by a quaternion.
            </summary>
            <param name="q">The numerator quaternion</param>
            <param name="r">The denominator quaternion</param>
            <returns>A new divided quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Division(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Divide a quaternion by a floating point number.
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a scalar</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_ExclusiveOr(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Raise a quaternion to a quaternion.
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_ExclusiveOr(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Raise a quaternion to a floating point number.
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a scalar</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Equality(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Equality operator for two quaternions
            </summary>
            <param name="left">The first quaternion</param>
            <param name="right">The second quaternion</param>
            <returns>True if the quaternions are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Equality(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Equality operator for quaternion and double
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a scalar</param>
            <returns>True if the real part of the quaternion is almost equal to the double and the rest of the quaternion is almost 0; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Equality(System.Double,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Equality operator for quaternion and double
            </summary>
            <param name="d">a scalar</param>
            <param name="q">a quaternion</param>
            <returns>True if the real part of the quaternion is almost equal to the double and the rest of the quaternion is almost 0; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Inequality(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Inequality operator for two quaternions
            </summary>
            <param name="left">The first quaternion</param>
            <param name="right">The second quaternion</param>
            <returns>True if the quaternions are different; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Inequality(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Inequality operator for quaternion and double
            </summary>
            <param name="q">a quaternion</param>
            <param name="d">a scalar</param>
            <returns>False if the real part of the quaternion is almost equal to the double and the rest of the quaternion is almost 0; otherwise True</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.op_Inequality(System.Double,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Inequality operator for quaternion and double
            </summary>
            <param name="d">a scalar</param>
            <param name="q">a quaternion</param>
            <returns>False if the real part of the quaternion is almost equal to the double and the rest of the quaternion is almost 0; otherwise True</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Distance(MathNet.Spatial.Euclidean.Quaternion,MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Returns the distance |a-b| of two quaternions, forming a metric space.
            </summary>
            <param name="a">The first quaternion</param>
            <param name="b">The second quaternion</param>
            <returns>The distance between two quaternions.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ChybyshevCosPoli(System.Int32,System.Double)">
            <summary>
            Returns cos(n*arccos(x)) = 2*Cos((n-1)arccos(x))cos(arccos(x)) - cos((n-2)*arccos(x))
            </summary>
            <param name="n">an integer</param>
            <param name="x">a double</param>
            <returns>the polynomial result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ChybyshevSinPoli(System.Int32,System.Double)">
            <summary>
            Returns sin(n*x)
            </summary>
            <param name="n">an integer</param>
            <param name="x">a double</param>
            <returns>the polynomial result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ToEulerAngles">
            <summary>
            The quaternion expresses a relationship between two coordinate frames, A and B say. This relationship, if
            expressed using Euler angles, is as follows:
            1) Rotate frame A about its z axis by angle gamma;
            2) Rotate the resulting frame about its (new) y axis by angle beta;
            3) Rotate the resulting frame about its (new) x axis by angle alpha, to arrive at frame B.
            </summary>
            <returns>An EulerAngle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.RotateRotationQuaternion(MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Rotates the provided rotation quaternion with this quaternion
            </summary>
            <param name="rotation">The rotation quaternion to rotate</param>
            <returns>A rotated quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.RotateUnitQuaternion(MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Rotates the provided unit quaternion with this quaternion
            </summary>
            <param name="unitQuaternion">The unit quaternion to rotate</param>
            <returns>A rotated quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Negate">
            <summary>
            Negate this quaternion.
            </summary>
            <returns>A new negated quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Conjugate">
            <summary>
            Conjugate this quaternion.
            </summary>
            <returns>a new conjugated quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Log(System.Double)">
            <summary>
            Logarithm to a given base.
            </summary>
            <param name="lbase">A base</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Log">
            <summary>
            Natural Logarithm to base E.
            </summary>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Log10">
            <summary>
            Common Logarithm to base 10.
            </summary>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Exp">
            <summary>
            Exponential Function.
            </summary>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Pow(System.Double)">
            <summary>
            Raise the quaternion to a given power.
            </summary>
            <remarks>
            This algorithm is not very accurate and works only for normalized quaternions
            </remarks>
            <param name="power">a number by which to raise the quaternion to</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Pow(System.Int32)">
            <summary>
            Raise the quaternion to a given power.
            </summary>
            <param name="power">a number by which to raise the quaternion to</param>
            <returns>A new quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Pow(MathNet.Spatial.Euclidean.Quaternion)">
            <summary>
            Raise the quaternion to a given power.
            </summary>
            <param name="power">a quaternion to use as the power</param>
            <returns>The quaternion raised to a power of another quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Sqrt">
            <summary>
            Square root of the Quaternion: q^(1/2).
            </summary>
            <returns>The square root of the quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            returns quaternion as real+ImagXi+ImagYj+ImagZk based on format provided
            </summary>
            <param name="format">A format string to pass to the format provider</param>
            <param name="formatProvider">a format provider</param>
            <returns>A string representation of the quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ToString">
            <summary>
            returns quaternion as real+ImagXi+ImagYj+ImagZk
            </summary>
            <returns>a string representation of the quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Equals(MathNet.Spatial.Euclidean.Quaternion,System.Double)">
            <summary>
            Returns a value to indicate if this vector is equivalent to a given unit vector
            </summary>
            <param name="other">The unit vector to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the vectors are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Equals(MathNet.Spatial.Euclidean.Quaternion)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ToNormSquared(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates norm of quaternion from it's algebraical notation
            </summary>
            <param name="real">The rotation component of the Quaternion</param>
            <param name="imagX">The X-value of the vector component of the Quaternion</param>
            <param name="imagY">The Y-value of the vector component of the Quaternion</param>
            <param name="imagZ">The Z-value of the vector component of the Quaternion</param>
            <returns>a norm squared quaternion</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Quaternion.ToUnitQuaternion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates unit quaternion (it's norm == 1) from it's algebraical notation
            </summary>
            <param name="real">The rotation component of the Quaternion</param>
            <param name="imagX">The X-value of the vector component of the Quaternion</param>
            <param name="imagY">The Y-value of the vector component of the Quaternion</param>
            <param name="imagZ">The Z-value of the vector component of the Quaternion</param>
            <returns>a unit quaternion</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Ray3D">
            <summary>
            A ray in 3D space
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Ray3D.ThroughPoint">
            <summary>
            The start point of the ray
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Ray3D.Direction">
            <summary>
            The direction of the ray
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Ray3D"/> struct.
            </summary>
            <param name="throughPoint">The start point of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.#ctor(MathNet.Spatial.Euclidean.Point3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Ray3D"/> struct.
            </summary>
            <param name="throughPoint">The start point of the ray.</param>
            <param name="direction">A vector indicating the direction of the ray.</param>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.op_Equality(MathNet.Spatial.Euclidean.Ray3D,MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified rays is equal.
            </summary>
            <param name="left">The first ray to compare</param>
            <param name="right">The second ray to compare</param>
            <returns>True if the rays are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.op_Inequality(MathNet.Spatial.Euclidean.Ray3D,MathNet.Spatial.Euclidean.Ray3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified rays is not equal.
            </summary>
            <param name="left">The first ray to compare</param>
            <param name="right">The second ray to compare</param>
            <returns>True if the rays are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.IntersectionOf(MathNet.Spatial.Euclidean.Plane,MathNet.Spatial.Euclidean.Plane)">
            <summary>
            The intersection of the two planes
            </summary>
            <param name="plane1">The first plane</param>
            <param name="plane2">The second plane</param>
            <returns>A ray at the intersection of two planes</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.Parse(System.String,System.String)">
            <summary>
            Parses string representation of throughpoint and direction
            See <see cref="M:MathNet.Spatial.Euclidean.Point3D.Parse(System.String,System.IFormatProvider)" /> and  <see cref="M:MathNet.Spatial.Euclidean.UnitVector3D.Parse(System.String,System.IFormatProvider,System.Double)" /> for details on acceptable formats.
            This is mainly meant for tests
            </summary>
            <param name="point">a string representing a start point for the ray.</param>
            <param name="direction">a string representing a direction for the ray.</param>
            <returns>A ray.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.ShortestLineTo(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns the shortest line from a point to the ray
            </summary>
            <param name="point3D">A point.</param>
            <returns>A line segment from the point to the closest point on the ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.IntersectionWith(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Returns the point at which this ray intersects with the plane
            </summary>
            <param name="plane">A geometric plane.</param>
            <returns>A point of intersection if such an intersection exists; otherwise null.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.IsCollinear(MathNet.Spatial.Euclidean.Ray3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of rays are collinear
            </summary>
            <param name="otherRay">The ray to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the rays are collinear; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.Equals(MathNet.Spatial.Euclidean.Ray3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of rays are equal
            </summary>
            <param name="other">The ray to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the rays are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.Equals(MathNet.Spatial.Euclidean.Ray3D)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Ray3D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.UnitVector3D">
            <summary>
            A unit vector, this is used to describe a direction in 3D
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.UnitVector3D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.UnitVector3D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.UnitVector3D.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/> struct.
            The provided values are scaled to L2 norm == 1
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.XAxis">
            <summary>
            Gets the X axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.YAxis">
            <summary>
            Gets the Y axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.ZAxis">
            <summary>
            Gets the z Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.Orthogonal">
            <summary>
            Gets a vector orthogonal to this
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.Length">
            <summary>
            Gets the length of the vector not the count of elements
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.UnitVector3D.CrossProductMatrix">
            <summary>
            Gets the cross product matrix
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Equality(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare</param>
            <param name="right">The second vector to compare</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Equality(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare</param>
            <param name="right">The second vector to compare</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Equality(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare</param>
            <param name="right">The second vector to compare</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Inequality(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Inequality(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Inequality(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Addition(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Adds two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new summed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Addition(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Adds two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new summed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Addition(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Adds two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new summed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Subtraction(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Subtracts two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new difference vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Subtraction(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Subtracts two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new difference vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Subtraction(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Subtracts two vectors
            </summary>
            <param name="v1">The first vector</param>
            <param name="v2">The second vector</param>
            <returns>A new difference vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_UnaryNegation(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v">A vector to negate</param>
            <returns>A new negated vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Multiply(System.Double,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="d">A scalar</param>
            <param name="v">A vector</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Division(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Divides a vector by a scalar
            </summary>
            <param name="v">A vector</param>
            <param name="d">A scalar</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.op_Multiply(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the dot product of two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Create(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/> struct.
            The provided values are scaled to L2 norm == 1
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <param name="tolerance">The allowed deviation from 1 for the L2-norm of x,y,z</param>
            <returns>The <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/> from a Math.NET Numerics vector of length 3.
            </summary>
            <param name="vector"> A vector with length 2 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.TryParse(System.String,MathNet.Spatial.Euclidean.UnitVector3D@,System.Double)">
            <summary>
            Attempts to convert a string of the form x,y,z into a vector
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">A vector with the coordinates specified</param>
            <param name="tolerance">The tolerance for how big deviation from Length = 1 is accepted</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Euclidean.UnitVector3D@,System.Double)">
            <summary>
            Attempts to convert a string of the form x,y,z into a unit vector
            First it is parsed to a vector then the length of the vector is compared to the tolerance and normalized if within.
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">A point at the coordinates specified</param>
            <param name="tolerance">The tolerance for how big deviation from Length = 1 is accepted</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Parse(System.String,System.IFormatProvider,System.Double)">
            <summary>
            Attempts to convert a string of the form x,y,z into a vector
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="tolerance">The tolerance for how big deviation from Length = 1 is accepted</param>
            <returns>A point at the coordinates specified</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ScaleBy(System.Double)">
            <summary>
            Scale this instance by <paramref name="factor"/>
            </summary>
            <param name="factor">The plane to project on.</param>
            <returns>The projected <see cref="T:MathNet.Spatial.Euclidean.Ray3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ProjectOn(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Project this instance onto the plane
            </summary>
            <param name="plane">The plane to project on.</param>
            <returns>The projected <see cref="T:MathNet.Spatial.Euclidean.Ray3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ProjectOn(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the Dot product of the current vector and a unit vector
            </summary>
            <param name="uv">A unit vector</param>
            <returns>Returns a new vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsParallelTo(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Computes whether or not this vector is parallel to another vector using the dot product method and comparing it
            to within a specified tolerance.
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of unity, false if it is not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsParallelTo(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Computes whether or not this vector is parallel to a unit vector using the dot product method and comparing it
            to within a specified tolerance.
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of unity, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsParallelTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Determine whether or not this vector is parallel to another vector within a given angle tolerance.
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="angleTolerance">The tolerance for when the vectors are considered parallel.</param>
            <returns>true if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsParallelTo(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Determine whether or not this vector is parallel to a unit vector within a given angle tolerance.
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="angleTolerance">The tolerance for when the vectors are considered parallel.</param>
            <returns>true if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsPerpendicularTo(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to another vector using the dot product method and
            comparing it to within a specified tolerance
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of zero, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.IsPerpendicularTo(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to another vector using the dot product method and
            comparing it to within a specified tolerance
            </summary>
            <param name="othervector">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of zero, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Negate">
            <summary>
            Inverses the direction of the vector, equivalent to multiplying by -1
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> pointing in the opposite direction.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.DotProduct(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.DotProduct(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.CrossProduct(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the cross product of this vector and a vector
            </summary>
            <param name="other">A vector</param>
            <returns>A new vector with the cross product result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.CrossProduct(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns the cross product of this vector and a unit vector
            </summary>
            <param name="inVector3D">A vector</param>
            <returns>A new vector with the cross product result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.GetUnitTensorProduct">
            <summary>
            Returns a dense Matrix with the unit tensor product
            </summary>
            <returns>a dense matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.SignedAngleTo(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns signed angle
            </summary>
            <param name="v">The vector to calculate the signed angle to </param>
            <param name="about">The vector around which to rotate to get the correct sign</param>
            <returns>A signed Angle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.SignedAngleTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns signed angle
            </summary>
            <param name="v">The vector to calculate the signed angle to </param>
            <param name="about">The vector around which to rotate to get the correct sign</param>
            <returns>A signed Angle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.AngleTo(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            The nearest angle between the vectors
            </summary>
            <param name="v">The other vector</param>
            <returns>The angle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.AngleTo(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Compute the angle between this vector and a unit vector using the arccosine of the dot product.
            </summary>
            <param name="v">The other vector</param>
            <returns>The angle between the vectors, with a range between 0° and 180°</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Rotate(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a vector that is this vector rotated the signed angle around the about vector
            </summary>
            <param name="about">The vector to rotate around.</param>
            <param name="angle">The angle positive according to right hand rule.</param>
            <returns>A rotated vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToPoint3D">
            <summary>
            Returns a point equivalent to the vector
            </summary>
            <returns>A point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToVector3D">
            <summary>
            Returns a Vector3D equivalent to this unit vector
            </summary>
            <returns>A vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.TransformBy(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Transforms the vector by a coordinate system and returns the transformed.
            </summary>
            <param name="coordinateSystem">A coordinate system</param>
            <returns>A new transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms a vector by multiplying it against a provided matrix
            </summary>
            <param name="m">The matrix to multiply</param>
            <returns>A new transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 3.
            </summary>
            <returns>A dense vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Equals(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of vectors are equal
            </summary>
            <param name="other">The vector to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the vectors are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Equals(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of vectors are equal
            </summary>
            <param name="other">The vector to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the vectors are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Equals(MathNet.Spatial.Euclidean.Vector3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Equals(MathNet.Spatial.Euclidean.UnitVector3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.UnitVector3D.DotProduct(MathNet.Spatial.Euclidean.Point3D)">
            <summary>
            Returns the dot product of this vector with a second
            </summary>
            <param name="v">a second vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Vector2D">
            <summary>
            A struct representing a vector in 2D space
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Vector2D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Vector2D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector2D.XAxis">
            <summary>
            Gets a vector representing the X Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector2D.YAxis">
            <summary>
            Gets a vector representing the Y Axis
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector2D.Length">
            <summary>
            Gets the length of the vector
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector2D.Orthogonal">
            <summary>
            Gets a vector orthogonal to this
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Equality(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Inequality(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Addition(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Adds two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A new summed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Subtraction(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Subtracts two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A new difference vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_UnaryNegation(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v">A vector to negate</param>
            <returns>A new negated vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Multiply(System.Double,MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="d">A scalar</param>
            <param name="v">A vector</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Multiply(MathNet.Spatial.Euclidean.Vector2D,System.Double)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="v">A vector</param>
            <param name="d">A scalar</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.op_Division(MathNet.Spatial.Euclidean.Vector2D,System.Double)">
            <summary>
            Divides a vector by a scalar
            </summary>
            <param name="v">A vector</param>
            <param name="d">A scalar</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.FromPolar(System.Double,MathNet.Spatial.Units.Angle)">
            <summary>
            Creates a Vector from Polar coordinates
            </summary>
            <param name="radius">The distance of the point from the origin</param>
            <param name="angle">The angle of the point as measured from the X Axis</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.TryParse(System.String,MathNet.Spatial.Euclidean.Vector2D@)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Euclidean.Vector2D@)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert a string of the form x,y into a point
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <returns>A point at the coordinates specified</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/> from a Math.NET Numerics vector of length 2.
            </summary>
            <param name="vector"> A vector with length 2 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.IsParallelTo(MathNet.Spatial.Euclidean.Vector2D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to <paramref name="other"/> vector by:
            1. Normalizing both
            2. Computing the dot product.
            3. Comparing 1- Math.Abs(dot product) to <paramref name="tolerance"/>
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="tolerance">The tolerance for when vectors are said to be parallel</param>
            <returns>True if the vector dot product is within the given double tolerance of unity, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.IsParallelTo(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Units.Angle)">
            <summary>
            Computes whether or not this vector is parallel to another vector within a given angle tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="tolerance">The tolerance for when vectors are said to be parallel</param>
            <returns>True if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.IsPerpendicularTo(MathNet.Spatial.Euclidean.Vector2D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to <paramref name="other"/> vector by:
            1. Normalizing both
            2. Computing the dot product.
            3. Comparing Math.Abs(dot product) to <paramref name="tolerance"/>
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="tolerance">The tolerance for when vectors are said to be parallel</param>
            <returns>True if the vector dot product is within the given double tolerance of unity, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.IsPerpendicularTo(MathNet.Spatial.Euclidean.Vector2D,MathNet.Spatial.Units.Angle)">
            <summary>
            Computes whether or not this vector is parallel to another vector within a given angle tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="tolerance">The tolerance for when vectors are said to be parallel</param>
            <returns>True if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.SignedAngleTo(MathNet.Spatial.Euclidean.Vector2D,System.Boolean,System.Boolean)">
            <summary>
            Compute the signed angle to another vector.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="clockWise">Positive in clockwise direction</param>
            <param name="returnNegative">When true and the result is > 180° a negative value is returned</param>
            <returns>The angle between the vectors.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.AngleTo(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Compute the angle between this vector and another using the arccosine of the dot product.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <returns>The angle between vectors, with a range between 0° and 180°</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Rotate(MathNet.Spatial.Units.Angle)">
            <summary>
            Rotates a Vector by an angle
            </summary>
            <param name="angle">The angle.</param>
            <returns>A new rotated vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.DotProduct(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Perform the dot product on a pair of vectors
            </summary>
            <param name="other">The second vector</param>
            <returns>The result of the dot product.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.CrossProduct(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Performs the 2D 'cross product' as if the 2D vectors were really 3D vectors in the z=0 plane, returning
            the scalar magnitude and direction of the resulting z value.
            Formula: (this.X * other.Y) - (this.Y * other.X)
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <returns>(this.X * other.Y) - (this.Y * other.X)</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ProjectOn(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Projects this vector onto another vector
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <returns>A <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/> representing this vector projected on <paramref name="other"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Normalize">
            <summary>
            Creates a new unit vector from the existing vector.
            </summary>
            <returns>A new unit vector in the same direction as the original vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ScaleBy(System.Double)">
            <summary>
            Scales the vector by the provided value
            </summary>
            <param name="d">a scaling factor</param>
            <returns>A new scale adjusted vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Negate">
            <summary>
            Returns the negative of the vector
            </summary>
            <returns>A new negated vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Subtract(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Subtracts a vector from this vector.
            </summary>
            <param name="v">A vector to subtract</param>
            <returns>A new vector which is the difference of the current vector and the provided vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Add(MathNet.Spatial.Euclidean.Vector2D)">
            <summary>
            Adds a vector to this vector
            </summary>
            <param name="v">A vector to add</param>
            <returns>A new vector which is the sum of the existing vector and the provided vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms a vector by multiplying it against a provided matrix
            </summary>
            <param name="m">The matrix to multiply</param>
            <returns>A new transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 2.
            </summary>
            <returns> A <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> with the x and y values from this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Equals(MathNet.Spatial.Euclidean.Vector2D,System.Double)">
            <summary>
            Compare this instance with <paramref name="other"/>
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector2D"/></param>
            <param name="tolerance">The tolerance when comparing the x and y components</param>
            <returns>True if found to be equal.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Equals(MathNet.Spatial.Euclidean.Vector2D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector2D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Euclidean.Vector3D">
            <summary>
            A struct representing a vector in 3D space
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Vector3D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Vector3D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Euclidean.Vector3D.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> struct.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector3D.NaN">
            <summary>
            Gets an invalid vector with no values
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector3D.Length">
            <summary>
            Gets the Euclidean Norm.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector3D.Orthogonal">
            <summary>
            Gets a unit vector orthogonal to this
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Euclidean.Vector3D.CrossProductMatrix">
            <summary>
            Gets a dense matrix containing the cross product of this vector
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Equality(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Inequality(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Multiply(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns the dot product of two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A scalar result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Addition(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Adds two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A new summed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Subtraction(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Subtracts two vectors
            </summary>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
            <returns>A new difference vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_UnaryNegation(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Negates the vector
            </summary>
            <param name="v">A vector to negate</param>
            <returns>A new negated vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Multiply(System.Double,MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="d">A scalar</param>
            <param name="v">A vector</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.op_Division(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Divides a vector by a scalar
            </summary>
            <param name="v">A vector</param>
            <param name="d">A scalar</param>
            <returns>A scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.TryParse(System.String,MathNet.Spatial.Euclidean.Vector3D@)">
            <summary>
            Attempts to convert a string of the form x,y,z into a vector
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">A vector with the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Euclidean.Vector3D@)">
            <summary>
            Attempts to convert a string of the form x,y,z into a vector
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">A point at the coordinates specified</param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert a string of the form x,y,z into a vector
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <returns>A point at the coordinates specified</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> from a Math.NET Numerics vector of length 3.
            </summary>
            <param name="vector"> A vector with length 2 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Normalize">
            <summary>
            Compute and return a unit vector from this vector
            </summary>
            <returns>a normalized unit vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ScaleBy(System.Double)">
            <summary>
            Multiplies the current vector by a scalar
            </summary>
            <param name="scaleFactor">a scalar</param>
            <returns>A new scaled vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ProjectOn(MathNet.Spatial.Euclidean.Plane)">
            <summary>
            Projects the vector onto a plane
            </summary>
            <param name="planeToProjectOn">A geometric plane</param>
            <returns>A ray</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ProjectOn(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the Dot product of the current vector and a unit vector
            </summary>
            <param name="uv">A unit vector</param>
            <returns>Returns a new vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsParallelTo(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Computes whether or not this vector is parallel to another vector using the dot product method and comparing it
            to within a specified tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of unity, false if it is not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsParallelTo(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Computes whether or not this vector is parallel to a unit vector using the dot product method and comparing it
            to within a specified tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of unity, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsParallelTo(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Determine whether or not this vector is parallel to another vector within a given angle tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="tolerance">The tolerance for when the vectors are considered parallel.</param>
            <returns>true if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsParallelTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Determine whether or not this vector is parallel to a unit vector within a given angle tolerance.
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="tolerance">The tolerance for when the vectors are considered parallel.</param>
            <returns>true if the vectors are parallel within the angle tolerance, false if they are not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsPerpendicularTo(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to another vector using the dot product method and
            comparing it to within a specified tolerance
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of zero, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.IsPerpendicularTo(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Computes whether or not this vector is perpendicular to another vector using the dot product method and
            comparing it to within a specified tolerance
            </summary>
            <param name="other">The other <see cref="T:MathNet.Spatial.Euclidean.UnitVector3D"/></param>
            <param name="tolerance">A tolerance value for the dot product method.  Values below 2*Precision.DoublePrecision may cause issues.</param>
            <returns>true if the vector dot product is within the given tolerance of zero, false if not</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Negate">
            <summary>
            Inverses the direction of the vector, equivalent to multiplying by -1
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Euclidean.Vector3D"/> pointing in the opposite direction.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.DotProduct(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.DotProduct(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.CrossProduct(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Returns the cross product of this vector and <paramref name="other"/>
            </summary>
            <param name="other">A vector</param>
            <returns>A new vector with the cross product result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.CrossProduct(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns the cross product of this vector and <paramref name="other"/>
            </summary>
            <param name="other">A vector</param>
            <returns>A new vector with the cross product result</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.GetUnitTensorProduct">
            <summary>
            Returns a dense Matrix with the unit tensor product
            [ux^2,  ux*uy, ux*uz],
            [ux*uy, uy^2,  uy*uz],
            [ux*uz, uy*uz, uz^2]
            </summary>
            <returns>a dense matrix</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.SignedAngleTo(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns signed angle
            </summary>
            <param name="v">The vector to calculate the signed angle to </param>
            <param name="about">The vector around which to rotate to get the correct sign</param>
            <returns>A signed Angle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.SignedAngleTo(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Returns signed angle
            </summary>
            <param name="v">The vector to calculate the signed angle to </param>
            <param name="about">The vector around which to rotate to get the correct sign</param>
            <returns>A signed angle</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.AngleTo(MathNet.Spatial.Euclidean.Vector3D)">
            <summary>
            Compute the angle between this vector and another using the arccosine of the dot product.
            </summary>
            <param name="v">The other vector</param>
            <returns>The angle between the vectors, with a range between 0° and 180°</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.AngleTo(MathNet.Spatial.Euclidean.UnitVector3D)">
            <summary>
            Compute the angle between this vector and a unit vector using the arccosine of the dot product.
            </summary>
            <param name="v">The other vector</param>
            <returns>The angle between the vectors, with a range between 0° and 180°</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Rotate(MathNet.Spatial.Euclidean.Vector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a vector that is this vector rotated the signed angle around the about vector
            </summary>
            <param name="about">A vector to rotate about</param>
            <param name="angle">A signed angle</param>
            <returns>A rotated vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Rotate(MathNet.Spatial.Euclidean.UnitVector3D,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a vector that is this vector rotated the signed angle around the about vector
            </summary>
            <param name="about">A unit vector to rotate about</param>
            <param name="angle">A signed angle</param>
            <returns>A rotated vector.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ToPoint3D">
            <summary>
            Returns a point equivalent to the vector
            </summary>
            <returns>A point</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.TransformBy(MathNet.Spatial.Euclidean.CoordinateSystem)">
            <summary>
            Transforms the vector by a coordinate system and returns the transformed.
            </summary>
            <param name="coordinateSystem">A coordinate system</param>
            <returns>A new transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms a vector by multiplying it against a provided matrix
            </summary>
            <param name="m">The matrix to multiply</param>
            <returns>A new transformed vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 3.
            </summary>
            <returns>A dense vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Equals(MathNet.Spatial.Euclidean.Vector3D,System.Double)">
            <summary>
            Returns a value to indicate if a pair of vectors are equal
            </summary>
            <param name="other">The vector to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the vectors are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Equals(MathNet.Spatial.Euclidean.UnitVector3D,System.Double)">
            <summary>
            Returns a value to indicate if this vector is equivalent to a given unit vector
            </summary>
            <param name="other">The unit vector to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>true if the vectors are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Equals(MathNet.Spatial.Euclidean.Vector3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Equals(MathNet.Spatial.Euclidean.UnitVector3D)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Euclidean.Vector3D.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Internals.AvlNode`1">
            <summary>
            A node of the Avl Tree
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNode`1.Parent">
            <summary>
            Gets or sets the parent node
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNode`1.Left">
            <summary>
            Gets or sets the left node
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNode`1.Right">
            <summary>
            Gets or sets the right node
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNode`1.Item">
            <summary>
            Gets or sets the item
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNode`1.Balance">
            <summary>
            Gets or sets the Avl balance
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNode`1.GetNextNode">
            <summary>
            Non recursive function that return the next ordered node
            </summary>
            <returns>The next node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNode`1.GetPreviousNode">
            <summary>
            Non recursive function that return the previous ordered node
            </summary>
            <returns>The previous node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1">
            <summary>
            An enumerator for AvlNodeItems
            </summary>
            <typeparam name="T">Any type which is also a node type</typeparam>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.avlTree">
            <summary>
            A reference to the tree
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.current">
            <summary>
            The current node
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.#ctor(MathNet.Spatial.Internals.AvlTreeSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1"/> class.
            </summary>
            <param name="avlTree">The tree to enumerate</param>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.Current">
            <summary>
            Gets the current node
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current node
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.Dispose">
            <summary>
            Dispose of the enumerator
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.MoveNext">
            <summary>
            Moves to the next node
            </summary>
            <returns>True if the move to the next node was successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlNodeItemEnumerator`1.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="T:MathNet.Spatial.Internals.AvlTreeSet`1">
            <summary>
            2016-12-08, Eric Ouellet
            The code is an adapted version of BitLush AvlTree: https://bitlush.com/blog/efficient-avl-tree-in-c-sharp
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlTreeSet`1.comparer">
            <summary>
            A comparer
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlTreeSet`1.root">
            <summary>
            The root node of the tree
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlTreeSet`1.syncRoot">
            <summary>
            a sync object
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.AvlTreeSet`1.count">
            <summary>
            A count of nodes
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.AvlTreeSet`1"/> class.
            </summary>
            <param name="comparer">a comparer for nodes</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.AvlTreeSet`1"/> class.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlTreeSet`1.Root">
            <summary>
            Gets the root node
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlTreeSet`1.Count">
            <summary>
            Gets the count of nodes
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlTreeSet`1.SyncRoot">
            <summary>
            Gets the sync object
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlTreeSet`1.IsSynchronized">
            <summary>
            Gets a value indicating whether the tree is synchronized;
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.AvlTreeSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the tree is read only;
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetEnumerator">
            <summary>
            Gets an enumerator for the tree
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the tree contains an item
            </summary>
            <param name="item">The item to find</param>
            <returns>True if the item is found; otherwise false;</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.Add(`0)">
            <summary>
            Adds an item to the tree
            </summary>
            <param name="item">The item to add</param>
            <returns>True if adding was successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns>an enumerator</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies to an array
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">start point</param>
            <param name="count">number of items to copy</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetFirstItem">
            <summary>
            Gets the first item
            </summary>
            <returns>The first item</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetFirstNode">
            <summary>
            Gets the first node
            </summary>
            <returns>The first node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetLastItem">
            <summary>
            gets the last item
            </summary>
            <returns>The last item</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetLastNode">
            <summary>
            Gets the last node
            </summary>
            <returns>returns the last node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.Remove(`0)">
            <summary>
            Removes a node
            </summary>
            <param name="item">item to remove</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.GetNode(`0)">
            <summary>
            Gets a node with the provided item
            </summary>
            <param name="item">An item to find</param>
            <returns>The node with that item</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.AddBalance(MathNet.Spatial.Internals.AvlNode{`0},System.Int32)">
            <summary>
            Should always be called for any inserted node
            </summary>
            <param name="node">A node</param>
            <param name="balance">The balance measure</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RotateLeft(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Rotate the tree node left
            </summary>
            <param name="node">A node</param>
            <returns>The rotated node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RotateRight(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Rotate a tree node right
            </summary>
            <param name="node">a node</param>
            <returns>The rotated tree node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RotateLeftRight(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Rotate a tree node leftright
            </summary>
            <param name="node">a node</param>
            <returns>a rotated tree node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RotateRightLeft(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Rotate a tree node rightleft
            </summary>
            <param name="node">a node</param>
            <returns>a rotated tree node</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RemoveNode(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Removes a node
            </summary>
            <param name="node">node to remove</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RemoveBalance(MathNet.Spatial.Internals.AvlNode{`0},System.Int32)">
            <summary>
            Should always be called for any removed node
            </summary>
            <param name="node">a node</param>
            <param name="balance">the node balance</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.Replace(MathNet.Spatial.Internals.AvlNode{`0},MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Replace a node
            </summary>
            <param name="target">The node to replace</param>
            <param name="source">The replacing node</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RecursiveCount(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Counts the nodes recursively
            </summary>
            <param name="node">A node in the tree</param>
            <returns>A count of nodes</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.AvlTreeSet`1.RecursiveGetChildMaxHeight(MathNet.Spatial.Internals.AvlNode{`0})">
            <summary>
            Find child max height
            </summary>
            <param name="node">A node in the tree</param>
            <returns>The height</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.ConvexHull">
            <summary>
            An implementation of the work of Lui, Chen and Ouellet for solving the convex hull problem
            https://www.codeproject.com/Articles/1210225/Fast-and-improved-D-Convex-Hull-algorithm-and-its
            <para>
             Quadrant: Q2 | Q1
                       -------
                       Q3 | Q4
            </para>
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.q1">
            <summary>
            First quadrant
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.q2">
            <summary>
            Second quadrant
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.q3">
            <summary>
            Third quadrant
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.q4">
            <summary>
            Fourth quadrant
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.listOfPoint">
            <summary>
            Initial list of points
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.shouldCloseTheGraph">
            <summary>
            A value indicating if the graph needs closing
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.findLimitFinalLock">
            <summary>
            A lock object
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ConvexHull.limit">
            <summary>
            A limit
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.#ctor(System.Collections.Generic.IEnumerable{MathNet.Spatial.Euclidean.Point2D},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.ConvexHull"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="shouldCloseTheGraph">True if the graph should be closed; otherwise false</param>
            <param name="initialResultGuessSize">An estimate for the initial size of the result set</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.GetResultsAsArrayOfPoint">
            <summary>
            Returns the results as an array of points
            </summary>
            <returns>The results</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.CalcConvexHull">
            <summary>
            Calculate the Convex Hull
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.IsPointToTheRightOfOthers(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            True if the point to check is to the right of the other provided points
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <param name="pointToCheck">The point to check</param>
            <returns>True if the point is to rhe right of the other; Otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.SetQuadrantLimitsOneThread">
            <summary>
            Set quadrant limits
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.FindLimits(MathNet.Spatial.Internals.MutablePoint[],System.Int32,System.Int32,MathNet.Spatial.Internals.ConvexHull.Limit)">
            <summary>
            Find the limits
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="start">the start point</param>
            <param name="offset">the offset</param>
            <param name="limit">the limit</param>
            <returns>A limit</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.FindLimits(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.ConvexHull.Limit)">
            <summary>
            Find limits
            </summary>
            <param name="point">a point</param>
            <param name="limit">a limit</param>
            <returns>The found limit</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.AggregateLimits(MathNet.Spatial.Internals.ConvexHull.Limit)">
            <summary>
            Set aggregate limits
            </summary>
            <param name="limit">A limit</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.IsZeroData">
            <summary>
            Checks if the data is empty
            </summary>
            <returns>True if no data</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.IsQuadrantAreDisjoint">
            <summary>
            Returns true if the quadrants are disjointed
            </summary>
            <returns>True if Disjoint; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.Init(MathNet.Spatial.Internals.MutablePoint[],System.Boolean)">
            <summary>
            Initializes the class
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="shouldCloseTheGraph">a bool indicating if the graph should be closed</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.Limit.#ctor(MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.ConvexHull.Limit"/> struct.
            </summary>
            <param name="point">a point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.ConvexHull.Limit.Copy">
            <summary>
            Copies a limit
            </summary>
            <returns>a new limit</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.MutablePoint">
            <summary>
            Provides a working surface for points for ConvextHull - do not use otherwise
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.MutablePoint"/> struct.
            </summary>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
        </member>
        <member name="P:MathNet.Spatial.Internals.MutablePoint.X">
            <summary>
            Gets or sets the X value
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.MutablePoint.Y">
            <summary>
            Gets or sets the Y Value
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.op_Equality(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified points is equal.
            </summary>
            <param name="p1">The first point to compare</param>
            <param name="p2">The second point to compare</param>
            <returns>True if the points are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.op_Inequality(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified points is not equal.
            </summary>
            <param name="p1">The first point to compare</param>
            <param name="p2">The second point to compare</param>
            <returns>True if the points are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.Equals(MathNet.Spatial.Internals.MutablePoint)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Internals.MutablePoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:MathNet.Spatial.Internals.QComparer">
            <summary>
            A comparer for convex hull's use of an Avl tree
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.QComparer.comparer">
            <summary>
            A function to compare with
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.QComparer.#ctor(System.Func{MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.QComparer"/> class.
            </summary>
            <param name="comparer">a function to use for comparing</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QComparer.Compare(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            Compares two points using the provided function
            </summary>
            <param name="pt1">the first point</param>
            <param name="pt2">the second point</param>
            <returns>A value of -1 if less than, a value of 1 is greater than; otherwise a value of 0</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.Quadrant">
            <summary>
            An avl node for convex hull representing a quadrant
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.FirstPoint">
            <summary>
            The first point
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.LastPoint">
            <summary>
            The last point
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.RootPoint">
            <summary>
            The root point
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.CurrentNode">
            <summary>
            The current node
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.ListOfPoint">
            <summary>
            A list of points
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.#ctor(MathNet.Spatial.Internals.MutablePoint[],System.Collections.Generic.IComparer{MathNet.Spatial.Internals.MutablePoint})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.Quadrant"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="comparer">Comparer is only used to add the second point (the last point, which is compared against the first one).</param>
        </member>
        <member name="T:MathNet.Spatial.Internals.Quadrant.Side">
            <summary>
            An enum for the side
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.Side.Unknown">
            <summary>
            Unknown side
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.Side.Left">
            <summary>
            left side
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Quadrant.Side.Right">
            <summary>
            right side
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.Prepare">
            <summary>
            Prepares the node
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.ProcessPoint(MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Tell if should try to add and where. -1 ==> Should not add.
            </summary>
            <param name="point">A point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.SetQuadrantLimits">
            <summary>
            Initialize every values needed to extract values that are parts of the convex hull.
            This is where the first pass of all values is done the get maximum in every directions (x and y).
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.IsPointToTheRightOfOthers(MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            To know if to the right. It is meaningful when p1 is first and p2 is next.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <param name="pointtToCheck">The point to check</param>
            <returns>Equivalent of tracing a line from p1 to p2 and tell if ptToCheck
            is to the right or left of that line taking p1 as reference point.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.IsGoodQuadrantForPoint(MathNet.Spatial.Internals.MutablePoint)">
            <summary>
            Checks if point should be in quadrant
            </summary>
            <param name="pt">a point</param>
            <returns>True if it is a good quadrant for the point; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Quadrant.InvalidateNeighbors(MathNet.Spatial.Internals.AvlNode{MathNet.Spatial.Internals.MutablePoint},MathNet.Spatial.Internals.AvlNode{MathNet.Spatial.Internals.MutablePoint},MathNet.Spatial.Internals.AvlNode{MathNet.Spatial.Internals.MutablePoint})">
            <summary>
            Called after insertion in order to see if the newly added point invalidate one
            or more neighbors and if so, remove it/them from the tree.
            </summary>
            <param name="pointPrevious">Previous point</param>
            <param name="pointNew">New point</param>
            <param name="pointNext">Next point</param>
        </member>
        <member name="T:MathNet.Spatial.Internals.QuadrantSpecific1">
            <summary>
            Class to process quadrant 1
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific1.#ctor(MathNet.Spatial.Internals.MutablePoint[],System.Func{MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.QuadrantSpecific1"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="comparer">a comparer</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific1.CanQuickReject(MathNet.Spatial.Internals.MutablePoint@,MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Check if we can quickly reject a point
            </summary>
            <param name="point">a point</param>
            <param name="pointHull">a point on the hull</param>
            <returns>True if can quickly reject; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific1.ProcessPoint(MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Iterate over each points to see if we can add it has a ConvexHull point.
            It is specific by Quadrant to improve efficiency.
            </summary>
            <param name="point">a point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific1.SetQuadrantLimits">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific1.IsGoodQuadrantForPoint(MathNet.Spatial.Internals.MutablePoint)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Internals.QuadrantSpecific2">
            <summary>
            Class to process quadrant 2
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific2.#ctor(MathNet.Spatial.Internals.MutablePoint[],System.Func{MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.QuadrantSpecific2"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="comparer">a comparer</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific2.CanQuickReject(MathNet.Spatial.Internals.MutablePoint@,MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Check if we can quickly reject a point
            </summary>
            <param name="point">a point</param>
            <param name="pointHull">a point on the hull</param>
            <returns>True if can quickly reject; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific2.ProcessPoint(MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Iterate over each points to see if we can add it has a ConvexHull point.
            It is specific by Quadrant to improve efficiency.
            </summary>
            <param name="point">a point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific2.SetQuadrantLimits">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific2.IsGoodQuadrantForPoint(MathNet.Spatial.Internals.MutablePoint)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Internals.QuadrantSpecific3">
            <summary>
            Class to process quadrant 3
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific3.#ctor(MathNet.Spatial.Internals.MutablePoint[],System.Func{MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.QuadrantSpecific3"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="comparer">a comparer</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific3.CanQuickReject(MathNet.Spatial.Internals.MutablePoint@,MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Check if we can quickly reject a point
            </summary>
            <param name="point">a point</param>
            <param name="pointHull">a point on the hull</param>
            <returns>True if can quickly reject; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific3.ProcessPoint(MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Iterate over each points to see if we can add it has a ConvexHull point.
            It is specific by Quadrant to improve efficiency.
            </summary>
            <param name="point">a point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific3.SetQuadrantLimits">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific3.IsGoodQuadrantForPoint(MathNet.Spatial.Internals.MutablePoint)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Internals.QuadrantSpecific4">
            <summary>
            Class to process quadrant 4
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific4.#ctor(MathNet.Spatial.Internals.MutablePoint[],System.Func{MathNet.Spatial.Internals.MutablePoint,MathNet.Spatial.Internals.MutablePoint,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.QuadrantSpecific4"/> class.
            </summary>
            <param name="listOfPoint">a list of points</param>
            <param name="comparer">a comparer</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific4.CanQuickReject(MathNet.Spatial.Internals.MutablePoint@,MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Check if we can quickly reject a point
            </summary>
            <param name="point">a point</param>
            <param name="pointHull">a point on the hull</param>
            <returns>True if can quickly reject; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific4.ProcessPoint(MathNet.Spatial.Internals.MutablePoint@)">
            <summary>
            Iterate over each points to see if we can add it has a ConvexHull point.
            It is specific by Quadrant to improve efficiency.
            </summary>
            <param name="point">a point</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific4.SetQuadrantLimits">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.QuadrantSpecific4.IsGoodQuadrantForPoint(MathNet.Spatial.Internals.MutablePoint)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Internals.HashCode">
            <summary>
            Generates a hashcode
            </summary>
        </member>
        <member name="T:MathNet.Spatial.Internals.ImmutableList">
            <summary>
            Internal implementation of an immutable list
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Factory Construction
            </summary>
            <typeparam name="T">The list type</typeparam>
            <param name="data">A list of items to initialize with</param>
            <returns>An immutable list</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList.AsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the passed source as a collection
            </summary>
            <typeparam name="T">the list type</typeparam>
            <param name="source">the list source</param>
            <returns>A collection</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.ImmutableList`1">
            <summary>
            An internal implementation of ImmutableList
            </summary>
            <typeparam name="T">A type for the list</typeparam>
        </member>
        <member name="F:MathNet.Spatial.Internals.ImmutableList`1.Empty">
            <summary>
            An empty list
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.ImmutableList`1.data">
            <summary>
            The list data
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Internals.ImmutableList`1"/> class.
            </summary>
            <param name="data">The data to initialize the list with</param>
        </member>
        <member name="P:MathNet.Spatial.Internals.ImmutableList`1.Count">
            <summary>
            Gets the number of items in the list
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Internals.ImmutableList`1.Item(System.Int32)">
            <summary>
            An 0 based index into the list
            </summary>
            <param name="index">the index</param>
            <returns>A list item</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="value">An item</param>
            <returns>A new list with the item added</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="values">The items to add</param>
            <returns>A new list with the items added</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.Remove(`0)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="value">The item to remove</param>
            <returns>A new list with the item removed</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.ImmutableList`1.GetRawData">
            <summary>
            An internal method to access the underlying data.  To be used with care.
            </summary>
            <returns>The backing data array</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.Text">
            <summary>
            Internal text processing
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.DoublePatternPointProvider">
            <summary>
            regex pattern with period
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.DoublePatternCommaProvider">
            <summary>
            regex pattern with comma
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.SeparatorPatternPointProvider">
            <summary>
            Separator with period
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.SeparatorPatternCommaProvider">
            <summary>
            Separator with comma
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.TryParse2D(System.String,System.IFormatProvider,System.Double@,System.Double@)">
            <summary>
            Attempts to parse a string into x, y coordinates
            </summary>
            <param name="text">a string</param>
            <param name="provider">a format provider</param>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.TryParse3D(System.String,System.IFormatProvider,System.Double@,System.Double@,System.Double@)">
            <summary>
            Attempts to parse a string into x, y, z coordinates
            </summary>
            <param name="text">A string</param>
            <param name="provider">A format provider</param>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <param name="z">The z value</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.TryParseAngle(System.String,System.IFormatProvider,MathNet.Spatial.Units.Angle@)">
            <summary>
            Attempts to parse a string into an Angle
            </summary>
            <param name="text">A string</param>
            <param name="provider">A format provider</param>
            <param name="a">An angle</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.TryParseDouble(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Attempts to parse a double
            </summary>
            <param name="s">A string</param>
            <param name="formatProvider">A format provider</param>
            <param name="result">A double</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.Text.Regex2D">
            <summary>
            A class providing regex matching for 2D values
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex2D.Pattern2D">
            <summary>
            The pattern for this regex
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex2D.RegexOptions">
            <summary>
            The standard options
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex2D.Point">
            <summary>
            A regex containing a .
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex2D.Comma">
            <summary>
            a regex containing a ,
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.Regex2D.TryMatch(System.String,System.IFormatProvider,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to match a string
            </summary>
            <param name="text">a string</param>
            <param name="formatProvider">a format provider</param>
            <param name="match">the match</param>
            <returns>True if successful; Otherwise false</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.Text.Regex3D">
            <summary>
            A class providing regex matching for 3D values
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex3D.Pattern3D">
            <summary>
            The pattern for this regex
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex3D.RegexOptions">
            <summary>
            The standard options
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex3D.Point">
            <summary>
            A regex containing a .
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.Regex3D.Comma">
            <summary>
            A regex containing a ,
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.Regex3D.TryMatch(System.String,System.IFormatProvider,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to match a string
            </summary>
            <param name="text">a string</param>
            <param name="formatProvider">a format provider</param>
            <param name="match">the match</param>
            <returns>True if successful; Otherwise false</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.Text.RegexAngle">
            <summary>
            A class providing regex matching for angle values
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.RadiansPattern">
            <summary>
            A regex for radians angles
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.DegreesPattern">
            <summary>
            A regex for degrees angles
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.RegexOptions">
            <summary>
            Standard regex options
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.RadiansPoint">
            <summary>
            Radians with a point
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.RadiansComma">
            <summary>
            Radians with a comma
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.DegreesPoint">
            <summary>
            Degrees with a point
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Internals.Text.RegexAngle.DegreesComma">
            <summary>
            Degrees with a comma
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.RegexAngle.TryMatchDegrees(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Attempts to match Degrees
            </summary>
            <param name="text">a string</param>
            <param name="provider">a format provider</param>
            <param name="value">a double</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.RegexAngle.TryMatchRadians(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Attempts to match Radians
            </summary>
            <param name="text">a string</param>
            <param name="provider">a format provider</param>
            <param name="value">a double</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.RegexAngle.TryMatchRadians(System.String,System.IFormatProvider,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to match Radians with either . or , separators
            </summary>
            <param name="text">a string</param>
            <param name="formatProvider">a format provider</param>
            <param name="match">a list of matches</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.Text.RegexAngle.TryMatchDegrees(System.String,System.IFormatProvider,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to match Degrees with either . or , separators
            </summary>
            <param name="text">a string</param>
            <param name="provider">a format provider</param>
            <param name="match">a list of matches</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.XmlReaderExt">
            <summary>
            An extension class for XmlReader
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.ReadElementAs``1(System.Xml.XmlReader)">
            <summary>
            Creates a default(T) and calls ReadXml(reader) on it.
            </summary>
            <typeparam name="T">The type of the instance to read from the current position of the reader.</typeparam>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/></param>
            <returns> A new instance of {T} with values from <paramref name="reader"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.TryReadAttributeAsDouble(System.Xml.XmlReader,System.String,System.Double@)">
            <summary>
            Reads the attribute named <paramref name="localName"/> if it exists on the current element.
            This is not a proper try method as it checks if <paramref name="reader"/> is null and throws.
            </summary>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/></param>
            <param name="localName">The name of the attribute to read the value of.</param>
            <param name="value">The value read from <paramref name="reader"/></param>
            <returns>True if the attribute was found.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.TryReadElementContentAsDouble(System.Xml.XmlReader,System.String,System.Double@)">
            <summary>
            Reads the values of the elements named <paramref name="localName"/> and <paramref name="localName"/> if they exist on the current element.
            This is not a proper try method as it checks if <paramref name="reader"/> is null and throws.
            </summary>
            <remarks>
            Calling this method has side effects as it changes the position of the reader.
            </remarks>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/></param>
            <param name="localName">The local name of the element to read value from.</param>
            <param name="value">The value read from <paramref name="reader"/></param>
            <returns>True if both elements were found.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.TryReadChildElementsAsDoubles(System.Xml.XmlReader,System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Reads the values of the elements named <paramref name="xName"/> and <paramref name="xName"/> if they exist on the current element.
            This is not a proper try method as it checks if <paramref name="reader"/> is null and throws.
            </summary>
            <remarks>
            Calling this method has side effects as it changes the position of the reader.
            </remarks>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/></param>
            <param name="xName">The local name of the x element.</param>
            <param name="yName">The local name of the y element.</param>
            <param name="x">The x value read from <paramref name="reader"/></param>
            <param name="y">The y value read from <paramref name="reader"/></param>
            <returns>True if both elements were found.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.TryReadChildElementsAsDoubles(System.Xml.XmlReader,System.String,System.String,System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            Reads the values of the elements named <paramref name="xName"/> and <paramref name="xName"/> if they exist on the current element.
            This is not a proper try method as it checks if <paramref name="reader"/> is null and throws.
            </summary>
            <remarks>
            Calling this method has side effects as it changes the position of the reader.
            </remarks>
            <param name="reader">A <see cref="T:System.Xml.XmlReader"/></param>
            <param name="xName">The local name of the x element.</param>
            <param name="yName">The local name of the y element.</param>
            <param name="zName">The local name of the z element.</param>
            <param name="x">The x value read from <paramref name="reader"/></param>
            <param name="y">The y value read from <paramref name="reader"/></param>
            <param name="z">The z value read from <paramref name="reader"/></param>
            <returns>True if both elements were found.</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.ReadToFirstDescendant(System.Xml.XmlReader)">
            <summary>
            Reads until first descendant
            </summary>
            <param name="reader">An xml reader</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlReaderExt.TryReadSiblingElementsAsDoubles(System.Xml.XmlReader,System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Attempts to read sibling elements as a pair of doubles
            </summary>
            <param name="subtree">an xml reader</param>
            <param name="xName">The name of the x element</param>
            <param name="yName">The name of the y element</param>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <returns>True if successful; otherwise false</returns>
        </member>
        <member name="T:MathNet.Spatial.Internals.XmlWriterExt">
            <summary>
            An extension class for XmlWriter
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlWriterExt.WriteElement(System.Xml.XmlWriter,System.String,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Writes an element
            </summary>
            <param name="writer">An Xml Writer</param>
            <param name="name">The element name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlWriterExt.WriteElement(System.Xml.XmlWriter,System.String,System.Double)">
            <summary>
            Writes an element
            </summary>
            <param name="writer">An Xml Writer</param>
            <param name="name">The element name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MathNet.Spatial.Internals.XmlWriterExt.WriteElement(System.Xml.XmlWriter,System.String,System.Double,System.String)">
            <summary>
            Writes an element
            </summary>
            <param name="writer">An Xml Writer</param>
            <param name="name">The element name</param>
            <param name="value">The value</param>
            <param name="format">a format to apply to the value</param>
        </member>
        <member name="T:MathNet.Spatial.XmlExt">
            <summary>
            Extensions for Xml generation
            </summary>
        </member>
        <member name="T:MathNet.Spatial.Projective.Matrix3DHomogeneous">
            <summary>
            An implementation of Matrix3DHomogeneous
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Matrix3DHomogeneous.matrix">
            <summary>
            internal representation of matrix
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.#ctor(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> class.
            </summary>
            <param name="matrix">An initial matrix</param>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> class.
            </summary>
            <param name="m00">Element at position m[0,0]</param>
            <param name="m01">Element at position m[0,1]</param>
            <param name="m02">Element at position m[0,2]</param>
            <param name="m03">Element at position m[0,3]</param>
            <param name="m10">Element at position m[1,0]</param>
            <param name="m11">Element at position m[1,1]</param>
            <param name="m12">Element at position m[1,2]</param>
            <param name="m13">Element at position m[1,3]</param>
            <param name="m20">Element at position m[2,0]</param>
            <param name="m21">Element at position m[2,1]</param>
            <param name="m22">Element at position m[2,2]</param>
            <param name="m23">Element at position m[2,3]</param>
            <param name="m30">Element at position m[3,0]</param>
            <param name="m31">Element at position m[3,1]</param>
            <param name="m32">Element at position m[3,2]</param>
            <param name="m33">Element at position m[3,3]</param>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.op_Multiply(MathNet.Spatial.Projective.Matrix3DHomogeneous,MathNet.Spatial.Projective.Matrix3DHomogeneous)">
            <summary>
            Multiply two matrices together
            </summary>
            <param name="m1">The first matrix</param>
            <param name="m2">The second matrix</param>
            <returns>A Matrix3DHomogeneous</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.Identity">
            <summary>
            Creates an identity matrix.
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> identity matrix.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Create a translation matrix
            </summary>
            <param name="dx">The x component.</param>
            <param name="dy">The y component.</param>
            <param name="dz">The z component.</param>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the translation.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Create a translation matrix
            </summary>
            <param name="sx">The x component.</param>
            <param name="sy">The y component.</param>
            <param name="sz">The z component.</param>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the scale operation.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.RotationAroundXAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Create a matrix for rotation around the x-axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the rotation.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.RotationAroundYAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Create a matrix for rotation around the y-axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the rotation.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.RotationAroundZAxis(MathNet.Spatial.Units.Angle)">
            <summary>
            Create a matrix for rotation around the z-axis.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the rotation.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.ReflectionXY">
            <summary>
            Create a matrix for reflecting about the xy-plane.
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the reflection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.ReflectionXZ">
            <summary>
            Create a matrix for reflecting about the xz-plane.
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the reflection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.ReflectionYZ">
            <summary>
            Create a matrix for reflecting about the yz-plane.
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the reflection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.FrontView">
            <summary>
            Create a front view projection matrix
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the projection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.SideView">
            <summary>
            Create a side view projection matrix
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the projection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.TopView">
            <summary>
            Create a top view projection matrix
            </summary>
            <returns>A <see cref="T:MathNet.Spatial.Projective.Matrix3DHomogeneous"/> describing the projection.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.Axonometric(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Create an axonometric projection matrix
            </summary>
            <param name="alpha">The first angle</param>
            <param name="beta">The second angle</param>
            <returns>A Matrix3DHomogeneous</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.Oblique(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Oblique projection matrix
            </summary>
            <param name="alpha">The first angle</param>
            <param name="theta">The second angle</param>
            <returns>A Matrix3DHomogeneous</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.Euler(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Create matrix from Euler Angles
            </summary>
            <param name="alpha">The first angle</param>
            <param name="beta">The second angle</param>
            <param name="gamma">The third angle</param>
            <returns>A Matrix3DHomogeneous</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Matrix3DHomogeneous.AzimuthElevation(System.Double,System.Double,System.Double)">
            <summary>
            Create matrix from azimuth and elevation
            </summary>
            <param name="elevation">The elevation</param>
            <param name="azimuth">The azimuth</param>
            <param name="oneOverd">The inverse of d</param>
            <returns>A Matrix3DHomogeneous</returns>
        </member>
        <member name="T:MathNet.Spatial.Projective.Point3DHomogeneous">
            <summary>
            A Point3DHomogeneous struct
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Point3DHomogeneous.X">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Point3DHomogeneous.Y">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Point3DHomogeneous.Z">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Point3DHomogeneous.W">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Point3DHomogeneous"/> struct.
            </summary>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <param name="z">The z value</param>
            <param name="w">The w value</param>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.#ctor(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Point3DHomogeneous"/> struct.
            </summary>
            <param name="vector">A mathnet.numerics vector</param>
        </member>
        <member name="P:MathNet.Spatial.Projective.Point3DHomogeneous.NaN">
            <summary>
            Gets a Vector3DHomogeneous with NaN values
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.op_Equality(MathNet.Spatial.Projective.Point3DHomogeneous,MathNet.Spatial.Projective.Point3DHomogeneous)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified points is equal.
            </summary>
            <param name="left">The first point to compare.</param>
            <param name="right">The second point to compare.</param>
            <returns>True if the points are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.op_Inequality(MathNet.Spatial.Projective.Point3DHomogeneous,MathNet.Spatial.Projective.Point3DHomogeneous)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified points is not equal.
            </summary>
            <param name="left">The first point to compare.</param>
            <param name="right">The second point to compare.</param>
            <returns>True if the points are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new Point3DHomogeneous from a Math.NET Numerics vector of length 4.
            </summary>
            <param name="vector"> A vector with length 4 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Projective.Point3DHomogeneous"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="format">A format for the string</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.Equals(MathNet.Spatial.Projective.Point3DHomogeneous,System.Double)">
            <summary>
            Returns a value to indicate if a pair of Point3DHomogeneous are equal
            </summary>
            <param name="other">The Point3DHomogeneous to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the Point3DHomogeneouses are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.Equals(MathNet.Spatial.Projective.Point3DHomogeneous)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToVector3D">
            <summary>
            Gets a vector3D
            </summary>
            <returns>A vector</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 4.
            </summary>
            <returns> A <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> with the x, y, z and w values from this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.ToVector3DHomogeneous">
            <summary>
            return new Vector3DHomogeneous(this.X, this.Y, this.Z, this.W);
            </summary>
            <returns> A <see cref="T:MathNet.Spatial.Projective.Vector3DHomogeneous"/> with the same x, y, z and w as this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Point3DHomogeneous.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms by matrix
            </summary>
            <param name="m">A transform matrix</param>
            <returns>A transformed Point3DHomogeneous</returns>
        </member>
        <member name="T:MathNet.Spatial.Projective.Vector3DHomogeneous">
            <summary>
            A Vector3DHomogeneous struct
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Vector3DHomogeneous.X">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Vector3DHomogeneous.Y">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Vector3DHomogeneous.Z">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Projective.Vector3DHomogeneous.W">
            <summary>
            Using public fields cos: http://blogs.msdn.com/b/ricom/archive/2006/08/31/performance-quiz-11-ten-questions-on-value-based-programming.aspx
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Vector3DHomogeneous"/> struct.
            </summary>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <param name="z">The z value</param>
            <param name="w">The w value</param>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.#ctor(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Projective.Vector3DHomogeneous"/> struct.
            </summary>
            <param name="vector">A mathnet.numerics vector</param>
        </member>
        <member name="P:MathNet.Spatial.Projective.Vector3DHomogeneous.NaN">
            <summary>
            Gets a Vector3DHomogeneous with NaN values
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.op_Equality(MathNet.Spatial.Projective.Vector3DHomogeneous,MathNet.Spatial.Projective.Vector3DHomogeneous)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors is equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.op_Inequality(MathNet.Spatial.Projective.Vector3DHomogeneous,MathNet.Spatial.Projective.Vector3DHomogeneous)">
            <summary>
            Returns a value that indicates whether any pair of elements in two specified vectors is not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new Vector3DHomogeneous from a Math.NET Numerics vector of length 4.
            </summary>
            <param name="vector"> A vector with length 4 to populate the created instance with.</param>
            <returns> A <see cref="T:MathNet.Spatial.Projective.Vector3DHomogeneous"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="format">A format for the string</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.Equals(MathNet.Spatial.Projective.Vector3DHomogeneous,System.Double)">
            <summary>
            Returns a value to indicate if a pair of Vector3DHomogeneous are equal
            </summary>
            <param name="other">The Vector3DHomogeneous to compare against.</param>
            <param name="tolerance">A tolerance (epsilon) to adjust for floating point error</param>
            <returns>True if the Vector3DHomogeneouses are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.Equals(MathNet.Spatial.Projective.Vector3DHomogeneous)">
            <summary>
            Returns a value to indicate if a pair of Vector3DHomogeneous are equal
            </summary>
            <param name="other">The Vector3DHomogeneous to compare against.</param>
            <returns>True if the Vector3DHomogeneouses are equal; otherwise false</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToPoint3DHomogeneous">
            <summary>
            return new Point3DHomogeneous(this.X, this.Y, this.Z, this.W);
            </summary>
            <returns> A <see cref="T:MathNet.Spatial.Projective.Point3DHomogeneous"/> with the same x, y, z and w as this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.TransformBy(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Transforms by matrix
            </summary>
            <param name="m">A transform matrix</param>
            <returns>A transformed Vector3DHomogeneous</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToVector">
            <summary>
            Convert to a Math.NET Numerics dense vector of length 4.
            </summary>
            <returns> A <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> with the x, y, z and w values from this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Projective.Vector3DHomogeneous.ToVector3D">
            <summary>
            Gets a vector3D
            </summary>
            <returns>A vector</returns>
        </member>
        <member name="T:MathNet.Spatial.Units.Angle">
            <summary>
            An angle
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Angle.Radians">
            <summary>
            The value in radians
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Angle.RadToDeg">
            <summary>
            Conversion factor for converting Radians to Degrees
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Angle.DegToRad">
            <summary>
            Conversion factor for converting Degrees to Radians
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Spatial.Units.Angle"/> struct.
            </summary>
            <param name="radians">The value in Radians</param>
        </member>
        <member name="P:MathNet.Spatial.Units.Angle.Degrees">
            <summary>
            Gets the value in degrees
            </summary>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Equality(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates whether two specified Angles are equal.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the angles are the same; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Inequality(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates whether two specified Angles are not equal.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the angles are different; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_LessThan(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates if a specified Angles is less than another.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the first angle is less than the second angle; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_GreaterThan(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates if a specified Angles is greater than another.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the first angle is greater than the second angle; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_LessThanOrEqual(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates if a specified Angles is less than or equal to another.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the first angle is less than or equal to the second angle; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_GreaterThanOrEqual(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value that indicates if a specified Angles is greater than or equal to another.
            </summary>
            <param name="left">The first angle to compare</param>
            <param name="right">The second angle to compare</param>
            <returns>True if the first angle is greater than or equal to the second angle; otherwise false.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Multiply(System.Double,MathNet.Spatial.Units.Angle)">
            <summary>
            Multiplies an Angle by a scalar
            </summary>
            <param name="left">The scalar.</param>
            <param name="right">The angle.</param>
            <returns>A new angle equal to the product of the angle and the scalar.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Multiply(MathNet.Spatial.Units.Angle,System.Double)">
            <summary>
            Multiplies an Angle by a scalar
            </summary>
            <param name="left">The angle.</param>
            <param name="right">The scalar.</param>
            <returns>A new angle equal to the product of the angle and the scalar.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Division(MathNet.Spatial.Units.Angle,System.Double)">
            <summary>
            Divides an Angle by a scalar
            </summary>
            <param name="left">The angle.</param>
            <param name="right">The scalar.</param>
            <returns>A new angle equal to the division of the angle by the scalar.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Addition(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Adds two angles together
            </summary>
            <param name="left">The first angle.</param>
            <param name="right">The second angle.</param>
            <returns>A new Angle equal to the sum of the provided angles.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_Subtraction(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Subtracts the second angle from the first
            </summary>
            <param name="left">The first angle.</param>
            <param name="right">The second angle.</param>
            <returns>A new Angle equal to the difference of the provided angles.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.op_UnaryNegation(MathNet.Spatial.Units.Angle)">
            <summary>
            Negates the angle
            </summary>
            <param name="angle">The angle to negate.</param>
            <returns>The negated angle.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.TryParse(System.String,MathNet.Spatial.Units.Angle@)">
            <summary>
            Attempts to convert a string into an <see cref="T:MathNet.Spatial.Units.Angle"/>
            </summary>
            <param name="text">The string to be converted</param>
            <param name="result">Am <see cref="T:MathNet.Spatial.Units.Angle"/></param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.TryParse(System.String,System.IFormatProvider,MathNet.Spatial.Units.Angle@)">
            <summary>
            Attempts to convert a string into an <see cref="T:MathNet.Spatial.Units.Angle"/>
            </summary>
            <param name="text">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <param name="result">An <see cref="T:MathNet.Spatial.Units.Angle"/></param>
            <returns>True if <paramref name="text"/> could be parsed.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Attempts to convert a string into an <see cref="T:MathNet.Spatial.Units.Angle"/>
            </summary>
            <param name="value">The string to be converted</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/></param>
            <returns>An <see cref="T:MathNet.Spatial.Units.Angle"/></returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.FromDegrees(System.Double)">
            <summary>
            Creates a new instance of Angle.
            </summary>
            <param name="value">The value in degrees.</param>
            <returns> A new instance of the <see cref="T:MathNet.Spatial.Units.Angle"/> struct.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.FromRadians(System.Double)">
            <summary>
            Creates a new instance of Angle.
            </summary>
            <param name="value">The value in radians.</param>
            <returns> A new instance of the <see cref="T:MathNet.Spatial.Units.Angle"/> struct.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.FromSexagesimal(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new instance of Angle from the sexagesimal format of the angle in degrees, minutes, seconds
            </summary>
            <param name="degrees">The degrees of the angle</param>
            <param name="minutes">The minutes of the angle</param>
            <param name="seconds">The seconds of the angle</param>
            <returns>A new instance of the <see cref="T:MathNet.Spatial.Units.Angle"/> struct.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:MathNet.Spatial.Units.Angle"/> from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:MathNet.Spatial.Units.Angle"/>.</param>
            <returns>An <see cref="T:MathNet.Spatial.Units.Angle"/> that contains the data read from the reader.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ToString">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ToString(System.String)">
            <summary>
            Returns a string representation of the Angle using the provided format
            </summary>
            <param name="format">a string indicating the desired format of the double.</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of this instance using the provided <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.ToString``1(System.String,System.IFormatProvider,``0)">
            <summary>
            Returns a string representation of the Angle using the provided <see cref="T:System.IFormatProvider"/> using the specified format for a given unit
            </summary>
            <typeparam name="T">The unit type, generic to avoid boxing.</typeparam>
            <param name="format">a string indicating the desired format of the double.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/></param>
            <param name="unit">Degrees or Radians</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.CompareTo(MathNet.Spatial.Units.Angle)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.Equals(MathNet.Spatial.Units.Angle,System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:MathNet.Spatial.Units.Angle"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same angle as this instance; otherwise, false.
            </returns>
            <param name="other">An <see cref="T:MathNet.Spatial.Units.Angle"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal</param>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.Equals(MathNet.Spatial.Units.Angle,MathNet.Spatial.Units.Angle)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:MathNet.Spatial.Units.Angle"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same angle as this instance; otherwise, false.
            </returns>
            <param name="other">An <see cref="T:MathNet.Spatial.Units.Angle"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal</param>
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.Equals(MathNet.Spatial.Units.Angle)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:MathNet.Spatial.Units.Angle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:MathNet.Spatial.Units.AngleUnit">
            <summary>
            Utility class providing static units for angles
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.AngleUnit.Degrees">
            <summary>
            A degree or degree of arc typically denoted by °.  It is defined such that a full rotation is 360 degrees.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.AngleUnit.Radians">
            <summary>
            The SI unit of angular measure is the Radian.
            </summary>
        </member>
        <member name="T:MathNet.Spatial.Units.Degrees">
            <summary>
            A degree or degree of arc typically denoted by °.  It is defined such that a full rotation is 360 degrees.
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Degrees.Name">
            <summary>
            Internal name
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Degrees.DegToRad">
            <summary>
            Degree to radians conversion factor
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Units.Degrees.ConversionFactor">
            <inheritdoc />
        </member>
        <member name="P:MathNet.Spatial.Units.Degrees.ShortName">
            <inheritdoc />
        </member>
        <member name="P:MathNet.Spatial.Units.IAngleUnit.ConversionFactor">
            Identifier differing only in case is not CLS-compliant
            <summary>
            Gets the value to multiply radians with to get a value in the current unit.
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Units.IAngleUnit.ShortName">
            <summary>
            Gets the name of the unit used in ToString
            </summary>
        </member>
        <member name="F:MathNet.Spatial.Units.Radians.Name">
            <summary>
            internal name
            </summary>
        </member>
        <member name="P:MathNet.Spatial.Units.Radians.ConversionFactor">
            <inheritdoc />
        </member>
        <member name="P:MathNet.Spatial.Units.Radians.ShortName">
            <inheritdoc />
        </member>
    </members>
</doc>
